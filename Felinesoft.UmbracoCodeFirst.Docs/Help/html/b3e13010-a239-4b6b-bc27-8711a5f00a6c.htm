<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Working With Node Pickers</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="b3e13010-a239-4b6b-bc27-8711a5f00a6c" /><meta name="Description" content="Code-first includes generic content node pickers designed to work with code-first content types." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Felinesoft Code-First for Umbraco<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Felinesoft Code-First for Umbraco" tocid="roottoc">Felinesoft Code-First for Umbraco</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Getting Started" tocid="04441c6f-baf5-4f66-a724-d0107a13af66">Getting Started</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82.htm" title="Working With Document Types" tocid="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82">Working With Document Types</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ea9b7789-8c43-48af-9c5e-7860e55cabe1.htm" title="Working With Data Types" tocid="ea9b7789-8c43-48af-9c5e-7860e55cabe1">Working With Data Types</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="844edfcf-ec79-489e-85fb-e07b441af825.htm" title="Working With Strongly-Typed Views" tocid="844edfcf-ec79-489e-85fb-e07b441af825">Working With Strongly-Typed Views</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="79ea8886-41e6-4691-9d55-4c3fc3be5310.htm" title="Working With Media Types" tocid="79ea8886-41e6-4691-9d55-4c3fc3be5310">Working With Media Types</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="b3e13010-a239-4b6b-bc27-8711a5f00a6c.htm" title="Working With Node Pickers" tocid="b3e13010-a239-4b6b-bc27-8711a5f00a6c">Working With Node Pickers</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/feline.png" /></td><td class="titleColumn">Working With Node Pickers</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
          Code-first includes generic content node pickers designed to work with code-first content types. The node pickers
          use the MultiNodeTreePicker property editor, setting the filter value so that only content items of the
          correct type can be picked in the back-office. All of the pickers come in single (minimum selection 0, maximum selection 1)
          or multi (minimum 0, no maximum) flavours.
        </p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#single">Using single node pickers</a></li><li class="outlineSectionEntry"><a href="#multi">Using multiple node pickers</a></li><li class="outlineSectionEntry"><a href="#attributes">Picker Attributes</a></li><li class="outlineSectionEntry"><a href="#nodeconfig">Modifying Picker Behaviour With NodeConfig Attributes</a></li></ul></div><div class="collapsibleAreaRegion" id="single"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Using single node pickers</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          In the following example single document &amp; media pickers are declared. The document picker only allows
          a single ExampleDocument node to be picked, or none. The media picker only allows a single ExampleMedia node to be
          picked, or none.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ContentProperty]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> SingleMediaPicker&lt;ExampleMedia&gt; PickedMedia { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

[ContentProperty]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> SingleDocumentPicker&lt;ExampleDocument&gt; PickedDocument { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAEAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Important note" /> Important</th></tr><tr><td><p>
            Lazy loading is particularly important for node picker properties. The chosen nodes are converted to strongly-typed models
            when the property is initialised, which can represent a not-insignificant overhead which should be avoided when the property
            is not being used. Of course there is also huge benefit in ensuring that the properties of the picked nodes themselves are
            also lazy loaded. In a multi-picker there could theoretically be up to 536 million nodes to convert when the property is accessed
            (<a href="http://stackoverflow.com/questions/3906891/what-is-the-max-limit-of-data-into-liststring-in-c" title="maximum list size on StackOverflow" target="_blank">maximum list size on StackOverflow</a>)
            so ensuring that each of those is not fully loaded on initialisation is obviously invaluable. In fact the performance impact
            even with a single picker is often noticable, depending on the complexity of the picked item.
          </p></td></tr></table></div><p>
          In a view the pickers above could be used as shown below.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAEAAA_tab1" class="codeSnippetContainerTabSingle">razor</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">section</span> <span class="highlight-xml-attribute-name">class</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"wrapper style4"</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">div</span> <span class="highlight-xml-attribute-name">class</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"inner"</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">div</span><span class="highlight-xml-bracket">&gt;</span>
      @Document.PickedDocument.PickedItem.SomePropertyOfSelectedDocumentItem
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">div</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">a</span> <span class="highlight-xml-attribute-name">href</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"@Document.PickedDocument"</span><span class="highlight-xml-bracket">&gt;</span>@Document.PickedDocument.Name<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">a</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">div</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">section</span><span class="highlight-xml-bracket">&gt;</span>

  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">section</span> <span class="highlight-xml-attribute-name">class</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"wrapper style4"</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">div</span> <span class="highlight-xml-attribute-name">class</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"inner"</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">div</span><span class="highlight-xml-bracket">&gt;</span>
      @Document.PickedMedia.PickedItem.SomePropertyOfSelectedMediaItem
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">div</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">a</span> <span class="highlight-xml-attribute-name">href</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"@Document.PickedMedia"</span><span class="highlight-xml-bracket">&gt;</span>@Document.PickedMedia.Name<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">a</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">div</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">section</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAEAAA");</script></div><div class="collapsibleAreaRegion" id="multi"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Using multiple node pickers</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          The multiple node pickers are used in much the same way as the single ones. The key difference is they don't expose a PickedItem property, as more
          than one item can be picked. Instead, in your view, you use the enumerable Items property to iterate over the items or use the [int] indexer to access them directly.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ContentProperty]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> MediaPicker&lt;ExampleMedia&gt; ManyPickedMedias { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

[ContentProperty]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> DocumentPicker&lt;ExampleDocument&gt; ManyPickedDocuments { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABADAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAADAAA_tab1" class="codeSnippetContainerTabSingle">razor</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">@foreach(var item in Document.ManyPickedDocuments)
{
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">div</span> <span class="highlight-xml-attribute-name">class</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"inner"</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">div</span><span class="highlight-xml-bracket">&gt;</span>
      @item.SomePropertyOfSelectedDocumentItem
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">div</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">a</span> <span class="highlight-xml-attribute-name">href</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"@item.NodeDetails.Url"</span><span class="highlight-xml-bracket">&gt;</span>@item.NodeDetails.Name<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">a</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">div</span><span class="highlight-xml-bracket">&gt;</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="attributes"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Picker Attributes</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          You can short-circuit the generic picker type &amp; use the picked item type directly by
          applying a picker attribute to a property. The first two properties below produce identical
          functionality in the back-office, but the first one short-circuits the picker in
          model building and sets the picked item directly on the content type property. This
          leads to neater view code, but comes at the trade-off of decreased compile-time type safety. 
          The generic picker's type constraints will always ensure an appropriate type is selected
          at compile-time, whereas the attribute approach can lead to exceptions at initialisation time
          if the attribute is applied to an inappropriate property.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[MediaPickerProperty]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> MediaImage ExampleImage { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

[ContentProperty]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> SingleMediaPicker&lt;MediaImage&gt; ExampleImagePicker { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

[DocumentPickerProperty]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> ExampleDocumentType ExampleDocument { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADACAAA");</script><p>
          You can also short-circuit multiple pickers in the same way, except specifying
          IEnumberable&lt;ContentType&gt; as the property type.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[MediaPickerProperty]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> IEnumberable&lt;MediaImage&gt; ExampleImage { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

[DocumentPickerProperty]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> IEnumberable&lt;ExampleDocumentType&gt; ExampleDocument { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABACAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p>
            Picker attributes can still be used alongside NodeConfig attributes (see below)
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="nodeconfig"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Modifying Picker Behaviour With NodeConfig Attributes</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          Both multi- and single-pickers can be further configured using the 
          <a href="a7d63d44-2dc6-f703-a1c9-25e4d2474abb.htm">NodePickerConfigAttribute</a>,
          which can be applied to either a node picker data type or a node picker property. The attribute can be used to control the minimum
          &amp; maximum number of pickable nodes, the start node for the picker tree &amp; any additional node types 
          which should also be allowed to be picked on top of the one specified in the generic parameter.
        </p><h4 class="subHeading">Minimum &amp; maximum node count</h4><div class="subsection"><p>
              This property specifies a multi-picker with a minimum
              selection of 5 nodes &amp; a maximum selection of 10 nodes
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAADABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ContentProperty]
[NodePickerConfig(minimumItems: <span class="highlight-number">5</span>, maximumItems: <span class="highlight-number">10</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> DocumentPicker&lt;ExampleDocument&gt; Document { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADABAAA");</script></div><h4 class="subHeading">Allowed node types</h4><div class="subsection"><p>
              This property specifies a single-picker where selecting a value is mandatory, and the total
              set of allowed types in the picker tree is ExampleMedia, ExampleMediaSubtype &amp; AnotherExampleMediaSubtype
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[MediaPickerProperty]
[NodePickerConfig(minimumItems: <span class="highlight-number">1</span>, allowedDescendants: <span class="highlight-keyword">new</span> Type[] { <span class="highlight-keyword">typeof</span>(ExampleMediaSubtype), <span class="highlight-keyword">typeof</span>(AnotherExampleMediaSubtype) })]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> ExampleMedia Media { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADACABAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Important note" /> Important</th></tr><tr><td><p>
                All the types supplied in the allowedDescendants array must be descended from the
                type T specified in the generic type argument (or the type of the property if a picker attribute is used).
              </p></td></tr></table></div><p>
              Note that code-first converts the picked nodes directly into T during model building, so you can't cast the items in the collection to the
              more derived types, nor use the is/as keywords to determine the more derived type and work with it. If you need to access the more derived
              type you can switch on the node type alias and call item.NodeDetails.PublishedContent.ConvertToModel&lt;RelevantType&gt;() to reconvert the content node into its
              "full" type.
            </p><p>
              The reason that code-first converts directly to T instead of converting to the full type and inserting that into the collection is that
              Razor views expect a particular concrete type &amp; will throw exceptions if you pass a descendant type, so in the majority of useful circumstances (e.g. iterate over
              picked items and pass them to a particular partial view for rendering) you actually want the concrete type T, not some more derived type.
            </p></div><h4 class="subHeading">Start Node by Path</h4><div class="subsection"><p>
              This property specifies a single-picker where the start node for
              the picker tree is at the path /home/pickableNodes. If the path
              is not found at runtime then the picker will fall back on starting the
              picker tree at root.
            </p><p>
              The maximumItems setting is ignored, as single-pickers always override this value
              with 1.
            </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ContentProperty]
[NodePickerConfig(maximumItems: <span class="highlight-number">10</span>, startNode:<span class="highlight-literal">"/home/pickableNodes"</span>, startNodeSpecifier:StartNodeSpecifier.Path)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> SingleDocumentPicker&lt;ExampleDocument&gt; Document { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABABAAA");</script></div><h4 class="subHeading">Start Node by ID</h4><div class="subsection"><p>
            This property specifies a single-picker where the start node for
            the picker tree has ID 1064. If the ID is not found at runtime then the
            picker will fall back on starting the picker tree at root.
            Picking a value for this node is mandatory because minimumItems is set to 1.
          </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ContentProperty]
[NodePickerConfig(minimumItems: <span class="highlight-number">1</span>, startNode: <span class="highlight-literal">"1064"</span>, startNodeSpecifier: StartNodeSpecifier.Id)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> SingleMediaPicker&lt;ExampleMedia&gt; Document { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAABAAA");</script></div></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>