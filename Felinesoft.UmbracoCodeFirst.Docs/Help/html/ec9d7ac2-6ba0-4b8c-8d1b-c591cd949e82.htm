<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Creating a Document Type</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82" /><meta name="Description" content="Most interaction with Code-First is done via attributes. Document types, properties, tabs, data types and media types are all denoted by attributes, where the various configuration options for the entity can be specified as constructor parameters." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Felinesoft Code-First for Umbraco<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Felinesoft Code-First for Umbraco" tocid="roottoc">Felinesoft Code-First for Umbraco</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Getting Started" tocid="04441c6f-baf5-4f66-a724-d0107a13af66">Getting Started</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82.htm" title="Creating a Document Type" tocid="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82">Creating a Document Type</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!"></a><a data-tochassubtree="true" href="ea9b7789-8c43-48af-9c5e-7860e55cabe1.htm" title="Working With Data Types" tocid="ea9b7789-8c43-48af-9c5e-7860e55cabe1">Working With Data Types</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize"><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize"></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn">Creating a Document Type</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections.</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#documenttype">Creating a document type class</a></li><li class="outlineSectionEntry"><a href="#properties">Adding properties to a document type</a></li><li class="outlineSectionEntry"><a href="#tab">Grouping Document Properties with Tabs</a></li></ul><p>
        Most interaction with Code-First is done via attributes. Document types, properties, tabs, data types and media types are all denoted by attributes,
        where the various configuration options for the entity can be specified as constructor parameters.
      </p><p>
        All of the attributes support inference of certain properties.
        For instance the name and alias of a document type will be inferred from the name of the class the attribute is applied to, unless values are explicitly specified in the
        attribute constructor. Attribute properties which can be inferred should be inferred, rather than explicitly declared, wherever possible. This leads
        to much more coherent, readable, maintainable code.
      </p><p>
        Explicitly specifying certain values can be useful in some circumstances. For instance when renaming a document type or property 
        where there is a need to keep its alias the same, such as in a system which is already live or already
        has content data that you don't want to lose.
      </p></div><div class="collapsibleAreaRegion" id="documenttype"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating a document type class</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          To define a document type create a class which inherits <a href="9e5ecd40-b241-e97f-9e7e-b2e01467ec55.htm">DocumentTypeBase</a>
          and decorate it with a <a href="5ef0f1d0-c561-6a9a-8572-35c341c8bfdc.htm">DocumentTypeAttribute</a>. The document type
          name, alias, default template, allowed children, icon, list view and allow at root properties can be specified in the attribute. The name and alias will be inferred from the name of the class
          if none are specified in the attribute. All attribute arguments are optional.
        </p><p>
          The following class declares a document type in Umbraco which is allowed at the root of the content tree, with alias codeFirstExampleDocument and
          name "Code First Example Document".
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DocumentType(AllowedAtRoot = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CodeFirstExampleDocument : DocumentTypeBase
{
    <span class="highlight-comment">//Add tabs and properties here</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAHAAA");</script></div><div class="collapsibleAreaRegion" id="properties"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Adding properties to a document type</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          The <a href="f5f534a5-edd6-340e-89c9-a7d2abe2324d.htm">DocumentPropertyAttribute</a> declares a property on
          the document type. The alias, name, property editor/data type, sort order and description can be set via the attribute. The alias and name will be inferred from the
          property name if none are specified. The data type will be inferred from the property type if none is specified, provided that the type is either a type from the
          <a href="9558e6f9-e80a-8c78-4333-f06cd398ddb6.htm">Felinesoft.UmbracoCodeFirst.DataTypes.BuiltIn</a> namespace, a valid 
          <a href="ea9b7789-8c43-48af-9c5e-7860e55cabe1.htm">custom data type</a> or one of the supported value types (string, int, DateTime, bool).
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAGAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DocumentType(AllowedAtRoot = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CodeFirstExampleDocument : DocumentTypeBase
{
    <span class="highlight-comment">//By default string properties declare a property with the built-in single-line textbox data type.</span>
    [DocumentProperty(Description = <span class="highlight-literal">"A string property."</span>)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> String { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    <span class="highlight-comment">//By default DateTime properties declare a property with the built-in 'date with time' data type.</span>
    [DocumentProperty(Description = <span class="highlight-literal">"A DateTime property."</span>)]
    <span class="highlight-keyword">public</span> DateTime DateTime { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    <span class="highlight-comment">//The ColorPicker type from the DataTypes.BuiltIn namespace is one of many such types</span>
    <span class="highlight-comment">//in that namespace which correspond to Umbraco's built-in data types. Using a built-in</span>
    <span class="highlight-comment">//data type for a property is as simple as adding a property of that type to your document type class.</span>
    [DocumentProperty(Description = <span class="highlight-literal">"A property using the built-in 'Approved Color' data type."</span>)]
    <span class="highlight-keyword">public</span> ColorPicker ColorPicker { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    <span class="highlight-comment">//This property uses the custom generic content picker type from the DataTypes namespace.</span>
    <span class="highlight-comment">//The selected content is converted to the corresponding strongly-typed model when the property is loaded.</span>
    <span class="highlight-comment">//This property is based on the Umbraco multi-node picker property editor, and automatically restricts the</span>
    <span class="highlight-comment">//editor to picking a maximum of one item of the relevant document type (in this case ContentPickerExampleDocument)</span>
    [DocumentProperty]
    <span class="highlight-keyword">public</span> TypedContentPicker&lt;ContentPickerExampleDocument&gt; SelectedContent { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAGAAA");</script><p>
          Some attributes from <a href="http://msdn2.microsoft.com/en-us/library/cc490428" target="_blank">System.ComponentModel.DataAnnotations</a> namespace can be applied to the document properties.
          Not all of the attributes are supported; only attributes which influence the output of a HtmlHelper can be used. For instance the Display attribute can be used define
          how a HtmlHelper renders a display or edit control for a document type property in a Razor view.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAGAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DocumentProperty(Description = <span class="highlight-literal">"A string property."</span>)]
[Display(Name = <span class="highlight-literal">"A Custom Display Name"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> String { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAGAAA");</script><p>There are plans in the future to allow validation attributes (e.g. MaxLengthAttribute) to be used to generate regex rules for Umbraco property validation.
        This will enable code-first to support regex validation and enable Umbraco back-office validation &amp; MVC's built-in validation to be unified, 
        allowing document types to be used as editable models in the standard MVC workflow.</p></div><div class="collapsibleAreaRegion" id="tab"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Grouping Document Properties with Tabs</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          Tabs can be defined by creating a class which inherits <a href="8dcde347-3377-8e91-9d27-cebc7fee0690.htm">TabBase</a>.
          The tab class can contain properties declared using the same approach as <a href="#properties">adding properties to document types</a>.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CodeFirstExampleTab : TabBase
{
    [DocumentProperty(Description = <span class="highlight-literal">"A string property."</span>)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> String { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEAFAAA");</script><p>
          To use the tab on a document type add a property to the document type class whose type is your tab class. Decorate the property with a 
          <a href="1ba0e63d-5860-eceb-08eb-85576d25e557.htm">DocumentTabAttribute</a>. The
          following example creates a document type containing a single tab named "My Tab".
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DocumentType(AllowedAtRoot = <span class="highlight-keyword">true</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CodeFirstExampleDocument : DocumentTypeBase
{
    [DocumentTab]
    <span class="highlight-keyword">public</span> CodeFirstExampleTab MyTab { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAFAAA");</script><p>
          The same tab class can be used in multiple document types and can be used more than once in a given document type. This offers richer composition options
          than are possible using the Umbraco back-office composition mechanism, which is not supported in code-first.
        </p><p>
          Tip: When a tab class is intended to be used only on a single document type then it can be neater to declare the tab as a nested class of the document type class.
        </p></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>