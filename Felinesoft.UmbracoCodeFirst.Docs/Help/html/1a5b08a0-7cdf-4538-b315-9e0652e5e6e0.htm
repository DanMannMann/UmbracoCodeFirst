<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Creating Custom Data Types</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0" /><meta name="Description" content="In Code-First data types are represented by classes which implement certain interfaces and are decorated with a T:Felinesoft.UmbracoCodeFirst.Attributes.DataTypeAttribute." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Felinesoft Code-First for Umbraco<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Felinesoft Code-First for Umbraco" tocid="roottoc">Felinesoft Code-First for Umbraco</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Getting Started" tocid="04441c6f-baf5-4f66-a724-d0107a13af66">Getting Started</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ea9b7789-8c43-48af-9c5e-7860e55cabe1.htm" title="Working With Data Types" tocid="ea9b7789-8c43-48af-9c5e-7860e55cabe1">Working With Data Types</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0.htm" title="Creating Custom Data Types" tocid="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0">Creating Custom Data Types</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="cb1301cc-cf88-4b2a-a662-3611bd2634e1.htm" title="Data Type Interfaces" tocid="cb1301cc-cf88-4b2a-a662-3611bd2634e1">Data Type Interfaces</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/feline.png" /></td><td class="titleColumn">Creating Custom Data Types</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#datatype">Creating a data type</a></li><li class="outlineSectionEntry"><a href="#implementing">Implementing the data type</a></li><li class="outlineSectionEntry"><a href="#nologic">Data types without conversion logic</a></li><li class="outlineSectionEntry"><a href="#factory">Data types using a separate class for conversion</a></li></ul><p>
        In Code-First data types are represented by classes which <a href="cb1301cc-cf88-4b2a-a662-3611bd2634e1.htm">implement certain interfaces</a> and are decorated with
        a <a href="0223039d-6947-a625-0536-e33a21af573a.htm">DataTypeAttribute</a>.
      </p></div><div class="collapsibleAreaRegion" id="datatype"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating a data type</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          The <a href="0223039d-6947-a625-0536-e33a21af573a.htm">DataTypeAttribute</a> can be used to specify the name, property editor alias
          and database storage type for the data type. The name and data storage type can be inferred from the class name and the implemented interface and so usually needn't be specified.
          However it is not possible to correctly infer the property editor alias, so this has to be specified explicitly.
        </p><p>
          The example below creates a data type with name "Address Data Type", stored to the database as Ntext and passed to/from the converter methods as a string. The data type
          uses a custom property editor which has alias "CodeFirst.JsonAddressEditor".
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAABEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DataType(propertyEditorAlias: <span class="highlight-literal">"CodeFirst.JsonAddressEditor"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDataType : IUmbracoNtextDataType
{
    <span class="highlight-comment">//insert custom modelling and logic for the data type</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABEAAA");</script></div><div class="collapsibleAreaRegion" id="implementing"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Implementing the data type</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          The data type interfaces specify two methods, Serialize and Initialize. Implementing these allows instances of the data type to be persisted and
          retrieved from the Umbraco database. This allows strongly-typed views using the code-first document &amp; data types, and allows content to be
          created, updated and persisted programmatically using the code-first models.
        </p><p>
          Initialize is called when the data type is being constructed during rendering. It takes a single argument of type T. 
          This method should set the values of the data type instance's properties according
          to the value passed in.
        </p><p>
          Serialize is called whenever an instance is to be persisted to the database by the code-first core. It should return the data type instance
          serialised to type T.
        </p><p>
          The example below shows the implementation of the AddressDataType. It has properties for the constituent parts of the address. These properties are populated
          by the Initialise method. The Initialise method assumes its input string contains a valid Json representation of aforementioned properties, as this is the format
          used by the property editor when it saves the value.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DataType(propertyEditorAlias: <span class="highlight-literal">"CodeFirst.JsonAddressEditor"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDataType : IUmbracoNtextDataType, IHtmlString
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">int</span> PropertyNumber { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> AddressLine1 { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> AddressLine2 { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> City { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> PostalCode { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Initialise(<span class="highlight-keyword">string</span> dbValue)
    {
        JsonConvert.PopulateObject(dbValue, <span class="highlight-keyword">this</span>);
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Serialise()
    {
        <span class="highlight-keyword">return</span> JsonConvert.SerializeObject(<span class="highlight-keyword">this</span>, Formatting.Indented);
    }

    <span class="highlight-comment">//Properties can be explicitly ignored by the Json serialiser using this attribute</span>
    [JsonIgnore]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Region
    {
        <span class="highlight-keyword">get</span>
        {
            <span class="highlight-keyword">return</span> <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"{0}, {1}"</span>, City, PostalCode);
        }
    }

    <span class="highlight-comment">//Implementing IHtmlString is a convenient way to set up consistent</span>
    <span class="highlight-comment">//formatting for use in views. Using @Document.AddressProperty in a Razor view</span>
    <span class="highlight-comment">//will automatically call ToHtmlString on the object and output the resultant raw string</span>
    <span class="highlight-comment">//to the page. Remember to sanitize your inputs!</span>
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> ToHtmlString()
    {
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">string</span>.Format(<span class="highlight-literal">"&lt;p&gt;{0} {1}&lt;br /&gt;{2}&lt;br /&gt;{3}&lt;br /&gt;&lt;br /&gt;{4}&lt;/p&gt;"</span>,
                        PropertyNumber,
                        HttpUtility.HtmlEncode(AddressLine1),
                        HttpUtility.HtmlEncode(AddressLine2),
                        HttpUtility.HtmlEncode(City),
                        HttpUtility.HtmlEncode(PostalCode));
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="nologic"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Data types without conversion logic</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          It is possible to create a data type without implementing the data type interface. This is useful for keeping your code cleaner if you don't intend to use
          strongly-typed views or create/update content programmatically. In this case the database storage type can be specified using the
          <a href="c0b42bf5-ec0a-f557-afdf-489b35a87297.htm">DbType</a> property of the
          DataTypeAttribute applied to the class. You must also set useConverter to false in the attribute constructor - setting the converter to null is not
          sufficient, the code-first manager will attempt to construct a default converter unless explicitly told not to.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DataType(propertyEditorAlias: <span class="highlight-literal">"CodeFirst.JsonAddressEditor"</span>, dbType: DataTypeDatabaseType.Ntext, useConverter: <span class="highlight-keyword">false</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDataType
{
    ...
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="factory"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Data types using a separate class for conversion</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          It is possible to implement your conversion logic on a separate class to your data type model. This can be done by creating a class which implements
          <a href="9bc075e4-7a7f-9e2a-c38b-9ee9893869f0.htm">IDataTypeConverter</a>. Be aware that more runtime
          type resolution is needed for this approach so it isn't as safe at compile-time as implementing the converion logic on the data type itself.
        </p><p>
          The best approach to implementing the conversion factory is to inherit the abstract 
          <a href="5cfa0f21-40a6-47df-b106-0f45bee66407.htm">DataTypeConverterBase<span id="LST7D20DB10_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7D20DB10_0?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>Tdb, Tentity<span id="LST7D20DB10_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST7D20DB10_1?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a> class, specifying 
          the output type of the property editor as Tdb and the target data type as Tentity.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDataTypeConverter : DataTypeConverterBase&lt;<span class="highlight-keyword">string</span>,AddressDataType&gt;
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> AddressDataType Create(<span class="highlight-keyword">string</span> input)
    {
        <span class="highlight-keyword">return</span> JsonConvert.DeserializeObject&lt;AddressDataType&gt;(input);
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> Serialise(AddressDataType input)
    {
        <span class="highlight-keyword">return</span> JsonConvert.SerializeObject(input, Formatting.Indented);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABAAA");</script><p>
          The converter type can be specified in the DataTypeAttribute in order to associate it with the data type.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DataType(propertyEditorAlias: <span class="highlight-literal">"CodeFirst.JsonAddressEditor"</span>, DbType: DataTypeDatabaseType.Ntext, ConverterType: <span class="highlight-keyword">typeof</span>(AddressDataTypeConverter))]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressDataType
{
    ...
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAA");</script></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>