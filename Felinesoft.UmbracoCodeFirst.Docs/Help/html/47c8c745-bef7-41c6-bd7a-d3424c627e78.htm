<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Registering Existing Classes as Data Types</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="47c8c745-bef7-41c6-bd7a-d3424c627e78" /><meta name="Description" content="Code-first maintains a mapping of CLR types to data type converters. Generally this mapping will consist mainly of code-first data classes, both built-in &amp; custom, but it is in fact possible to register a converter for any CLR type." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Felinesoft Code-First for Umbraco<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Felinesoft Code-First for Umbraco" tocid="roottoc">Felinesoft Code-First for Umbraco</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Getting Started" tocid="04441c6f-baf5-4f66-a724-d0107a13af66">Getting Started</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ea9b7789-8c43-48af-9c5e-7860e55cabe1.htm" title="Working With Data Types" tocid="ea9b7789-8c43-48af-9c5e-7860e55cabe1">Working With Data Types</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0.htm" title="Creating Custom Data Types" tocid="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0">Creating Custom Data Types</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="f13fc6da-38dc-4585-b0f3-e701d17d03e1.htm" title="Working With Pre-Values" tocid="f13fc6da-38dc-4585-b0f3-e701d17d03e1">Working With Pre-Values</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="787d469d-06cb-4ba1-8b13-d889e1b88c72.htm" title="Using Code-First with Umbraco Property Editor Value Converters" tocid="787d469d-06cb-4ba1-8b13-d889e1b88c72">Using Code-First with Umbraco Property Editor Value Converters</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="47c8c745-bef7-41c6-bd7a-d3424c627e78.htm" title="Registering Existing Classes as Data Types" tocid="47c8c745-bef7-41c6-bd7a-d3424c627e78">Registering Existing Classes as Data Types</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/feline.png" /></td><td class="titleColumn">Registering Existing Classes as Data Types</td></tr></table><span class="introStyle"></span><div class="introduction"><p>Code-first maintains a mapping of CLR types to data type converters. Generally this mapping
      will consist mainly of code-first data classes, both built-in &amp; custom, but it is in fact
      possible to register a converter for any CLR type. Each type may only be registered once with a single
      data type instance &amp; converter.</p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#registering">Registering a Type</a></li><li class="outlineSectionEntry"><a href="#builtin">The Built-In Primitives</a></li></ul></div><div class="collapsibleAreaRegion" id="registering"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Registering a Type</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          In the following example the bool primitive type is associated with Umbraco's "true/false" data type, using
          a converter which can convert between the database type (integer) and the entity type (bool). The converter
          is based on DataTypeConverterBase&lt;Tdb,Tentity&gt;. This is almost always the best approach to creating
          a custom converter.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACACAAA_tab1" class="codeSnippetContainerTabSingle">Defining the Converter</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">sealed</span> <span class="highlight-keyword">class</span> BoolTrueFalseConverter : DataTypeConverterBase&lt;<span class="highlight-keyword">int</span>, <span class="highlight-keyword">bool</span>&gt;
  {
      <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">bool</span> Create(<span class="highlight-keyword">int</span> input, Action&lt;<span class="highlight-keyword">object</span>&gt; contextAction = <span class="highlight-keyword">null</span>)
      {
          <span class="highlight-comment">//you can safely ignore the context action, there's no need to register this</span>
          <span class="highlight-comment">//value in the model context as it is not a "full" code-first-managed data type</span>
          <span class="highlight-keyword">return</span> input == <span class="highlight-number">1</span>;
      }

      <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">int</span> Serialise(<span class="highlight-keyword">bool</span> input)
      {
          <span class="highlight-keyword">return</span> input ? <span class="highlight-number">1</span> : <span class="highlight-number">0</span>;
      }
  }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACACAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABACAAA_tab1" class="codeSnippetContainerTabSingle">Registering the Type</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">//The deferred registration action is executed by the DataTypeModule at the correct time during initialisation. Only</span>
<span class="highlight-comment">//one deferred registration action can be assigned, so it should perform all registrations required by your application.</span>
Core.Modules.DataTypeModule.DeferredRegistrations = x =&gt;
{
    x.RegisterIntegerType&lt;<span class="highlight-keyword">bool</span>, BoolTrueFalseConverter&gt;(BuiltInDataTypes.TrueFalse);
};
CodeFirstManager.Current.Initialise(<span class="highlight-keyword">this</span>.GetType().Assembly);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABACAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Caution note" /> Caution</th></tr><tr><td><p>
			Don't implement your own mapping between bool &amp; the true/false data type as shown in the example - this registration exists
			by default (as per <a href="#builtin">below</a>) and can be used without any custom jiggery pokery.
		  </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="builtin"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The Built-In Primitives</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          Code-first includes registrations for 4 primitive types by default
        </p><ul><li><p>bool - registered to Umbraco's "true/false" data type</p></li><li><p>string - registered to Umbraco's Textstring data type</p></li><li><p>int - registered to Umbraco's Numeric data type</p></li><li><p>DateTime - registered to Umbraco's "Date with Time" data type</p></li></ul><p>
          This means you can use these 4 primitives in the same way you'd use a code-first data type
          when defining a content type, and they will map to the listed Umbraco data type. If you need to associate
          different data types with these primitives then you can turn off the built-in registrations
          as follows:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">CodeFirstManager.Current.Features.UseBuiltInPrimitiveDataTypes = <span class="highlight-keyword">false</span>;
CodeFirstManager.Current.Initialise(<span class="highlight-keyword">this</span>.GetType().Assembly);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAA");</script></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>