<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Using Document Type Compositions</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="3a202165-ef09-4764-8c0e-07b7633501a6" /><meta name="Description" content="Umbraco 7 supports document type compositions. Compositions allow for document types to be included within other document types, creating a much richer palette of options for extending existing types, sharing partial views between types and so on." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Felinesoft Code-First for Umbraco<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Felinesoft Code-First for Umbraco" tocid="roottoc">Felinesoft Code-First for Umbraco</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Getting Started" tocid="04441c6f-baf5-4f66-a724-d0107a13af66">Getting Started</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82.htm" title="Working With Document Types" tocid="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82">Working With Document Types</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="20fe66a1-809d-4422-b3a6-301da9ff84a1.htm" title="Using Tabs on Document Types" tocid="20fe66a1-809d-4422-b3a6-301da9ff84a1">Using Tabs on Document Types</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="3a202165-ef09-4764-8c0e-07b7633501a6.htm" title="Using Document Type Compositions" tocid="3a202165-ef09-4764-8c0e-07b7633501a6">Using Document Type Compositions</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/feline.png" /></td><td class="titleColumn">Using Document Type Compositions</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        Umbraco 7 supports document type compositions. Compositions allow for document types to be included within other document types, creating a much richer
        palette of options for extending existing types, sharing partial views between types and so on.
      </p></div><div class="collapsibleAreaRegion" id="Section1"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating Document Type Compositions</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          Code-first supports compositions, which can be created by adding a property
          to a document type class whose property type is another document type, and then decorating that property with a <a href="743f30bb-a672-e22f-8441-97161fd5bd51.htm">ContentCompositionAttribute</a>.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACBBAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACBBAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACBBAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACBBAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DocumentType]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyDocumentType : DocumentTypeBase
{
    [ContentProperty]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Textstring ExistingProperty1 { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [ContentProperty]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Textstring ExistingProperty2 { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [ContentComposition]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> MyNewDocumentType NewProperties { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}

[DocumentType]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyNewDocumentType : DocumentTypeBase
{
    [ContentProperty]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Textstring NewProperty1 { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [ContentProperty]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Textstring NewProperty2 { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACBBAAA");</script><p>
          The document type being composed, and the document type you're composing onto it, must be valid
          according to the usual rules in Umbraco. There is one notable extra rule in code-first; document types with common
          ancestors can't be composed, in order to avoid duplicate property aliases. In most circumstances such a composition would
          be caught out by the usual Umbraco rules anyway, but in code-first they are completely invalid and will always cause an exception
          on initialisation.
        </p><ul><li><p>If a document type is a parent to other types or is used in an existing composition then it cannot have compositions added to it.</p></li><li><p>A document type cannot be composed with itself.</p></li><li><p>A document type cannot be composed with an ancestor or descendant of itself.</p></li><li><p>A document type cannot be composed with an document type with which it shares common ancestors.</p></li></ul></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>