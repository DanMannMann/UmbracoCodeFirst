<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Walkthrough - The Quiz Demo</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="23fc3bce-40df-4a04-9c71-3980e931de5f" /><meta name="Description" content="The Quiz Demo is a simple application, built on Umbraco with Code-First, which allows multiple choice quizzes to be designed by content authors and played by users." /><meta name="Microsoft.Help.ContentType" content="How To" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Felinesoft Code-First for Umbraco<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Felinesoft Code-First for Umbraco" tocid="roottoc">Felinesoft Code-First for Umbraco</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Getting Started" tocid="04441c6f-baf5-4f66-a724-d0107a13af66">Getting Started</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="23fc3bce-40df-4a04-9c71-3980e931de5f.htm" title="Walkthrough - The Quiz Demo" tocid="23fc3bce-40df-4a04-9c71-3980e931de5f">Walkthrough - The Quiz Demo</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="0a2ab401-61d0-2b5d-0efb-460009b613e7.htm" title="API Reference" tocid="26f3770f-cde6-4a28-85f1-97a34019d139">API Reference</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/feline.png" /></td><td class="titleColumn">Walkthrough - The Quiz Demo</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#installing">Installing Code-First</a></li><li class="outlineSectionEntry"><a href="#doctypes">Creating Document Types</a></li><li class="outlineSectionEntry"><a href="#props">Creating Property Types</a></li><li class="outlineSectionEntry"><a href="#dat">Creating Data Types</a></li></ul><p>
		The Quiz Demo is a simple application, built on Umbraco with Code-First, which allows multiple choice
		quizzes to be designed by content authors and played by users. This walkthrough covers a representative subset
		of the implementation, as an introduction to using Code-First. The complete project is available from the Code-First github.
	  </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
		  Code-First is a tool intended for professional developers delivering Umbraco installations to enterprise.
		  This walkthrough assumes the reader is familiar with Umbraco 7 and has a good grasp of C#.
		</p></td></tr></table></div><p>
		The Quiz Demo uses, and is a good introduction to, the following Code-First features:
	  </p><ul><li><p>Document Types</p></li><li><p>Media Types</p></li><li><p>List View Document Types</p></li><li><p>Custom Data Types</p></li><li><p>Image Croppers</p></li><li><p>Node Picker Properties</p></li><li><p>Strongly-Typed Views</p></li><li><p>Dictionaries</p></li><li><p>Content Events</p></li><li><p>Document Creation/Persistence</p></li><li><p>Type Tree Filtering</p></li></ul></div><div class="collapsibleAreaRegion" id="installing"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Installing Code-First</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
		  Start with an empty MVC4 project with Umbraco installed. Code-First supports Umbraco 7.2.1+. From that point follow this simple procedure to install Code-First.
		</p><h3 class="procedureSubHeading">Steps</h3><div class="subSection"><ul><li><p>Add the Code-First nuget package using the command
				</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABBAAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABBAAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABBAAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">install-package FelinesoftCodeFirst</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABBAAFAAA");</script></li><li><p>Add the following ApplicationEventHandler to initialise Code-First when the site starts</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABAAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABAAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABAAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABAAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> StartUp : ApplicationEventHandler
{

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)
    {
        <span class="highlight-comment">//Tell Code-First to hide from the back-office document type &amp; media type trees any entities which are defined in code.</span>
        CodeFirstManager.Current.Features.HideCodeFirstEntityTypesInTrees = <span class="highlight-keyword">true</span>;

        <span class="highlight-comment">//Tell Code-First to use concurrent initialisation, so that modules perform their initialisation in parallel and, therefore, more quickly</span>
        <span class="highlight-comment">//note: this should be explicitly set to false in load-balanced/farm deployments due to a concurrency bug in Umbraco core (seen in 7.2.1)</span>
        CodeFirstManager.Current.Features.UseConcurrentInitialisation = <span class="highlight-keyword">true</span>; 

        <span class="highlight-comment">//Initialise Code-First, using types found in the assembly where this class is located</span>
        CodeFirstManager.Current.Initialise(GetType().Assembly);
     }
 }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABAAFAAA");</script></li></ul></div></div><div class="collapsibleAreaRegion" id="doctypes"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating Document Types</span></div><div id="ID2RBSection" class="collapsibleSection"><h3 class="procedureSubHeading">Creating the Document Type Class</h3><div class="subSection"><ul><li><p>
				  Within the MVC4 project create a folder named DocTypes, and within that folder create a C# class file named Question.cs
				</p><div class="mediaNear"><img alt="doctypes sln" src="../media/doctypes_sln.png" /></div></li><li><p>Create a class which inherits from <a href="ecc5da3e-b384-7c84-2265-0eeba04316cc.htm">DocumentTypeBase</a>
				 and decorate it with a <a href="5ef0f1d0-c561-6a9a-8572-35c341c8bfdc.htm">DocumentTypeAttribute</a>. Question will
				 be a type which can only be created under a parent, so set its allowAtRoot property to false.
			  </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABBAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABBAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABBAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABBAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Felinesoft.UmbracoCodeFirst.ContentTypes;
<span class="highlight-keyword">using</span> Felinesoft.UmbracoCodeFirst.Attributes;
<span class="highlight-keyword">using</span> Felinesoft.UmbracoCodeFirst.DataTypes.BuiltIn;
<span class="highlight-keyword">using</span> Felinesoft.UmbracoCodeFirst.Linq;

<span class="highlight-keyword">namespace</span> Felinesoft.UmbracoCodeFirst.QuizDemo.DocTypes
{
    [DocumentType(allowAtRoot: <span class="highlight-keyword">false</span>)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Question : DocumentTypeBase
    {

    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABBAEAAA");</script></li></ul></div><h3 class="procedureSubHeading">Adding Tabs to the Document Type</h3><div class="subSection"><ul><li><p>
				  Create a nested class for each tab definition required, in this case QuestionTab and ExtrasTab. The tab classes should inherit <a href="23857109-2366-9f81-8c2c-bebbb97baab4.htm">TabBase</a>.
				</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABBAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABBAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABBAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABBAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">  [DocumentType(allowAtRoot: <span class="highlight-keyword">false</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Question : DocumentTypeBase
{
    <span class="highlight-preprocessor">#region</span> Tab Definitions
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> QuestionTab : TabBase
    {

    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ExtrasTab : TabBase
    {

    }            
    <span class="highlight-preprocessor">#endregion</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABBAAEAAA");</script></li><li><p>
				  Add a property to the Question class for each tab type, to declare that tab as a member of the Question document type. The tab properties should be decorated with a 
				  <a href="82a67e2b-0d73-cb6d-e666-6ec5f4c201fe.htm">ContentTabAttribute</a>.
				</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAABAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAABAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAABAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAABAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">  [DocumentType(allowAtRoot: <span class="highlight-keyword">false</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Question : DocumentTypeBase
{
    ...

    <span class="highlight-preprocessor">#region</span> Tab Declarations
    [ContentTab]
    <span class="highlight-keyword">public</span> QuestionTab QuestionDetails { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [ContentTab]
    <span class="highlight-keyword">public</span> ExtrasTab Extras { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    <span class="highlight-preprocessor">#endregion</span>        
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAABAAEAAA");</script></li></ul><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
				  Tabs are represented by classes. It is recommended best practice to create tab classes as nested classes of the document type, as in this walkthrough. However this is not essential.
				  One situation where creating a top-level class would be better is if you want the same tab to be added to many document types, a useful composition approach
				  unique to Code-First.
				</p></td></tr></table></div></div></div><div class="collapsibleAreaRegion" id="props"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating Property Types</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
		  Umbraco property types are represented by regular C# properties on the document type and tab classes. The type of the C# property denotes the Umbraco data type to use, the
		  name of the property denotes the Umbraco property type name &amp; alias and the <a href="e5b2e294-c2c2-97c2-f5f6-25f0e43971f6.htm">ContentPropertyAttribute</a> 
		  can be used to specify all other Umbraco property type configuration.
		</p><h3 class="procedureSubHeading">Adding Properties</h3><div class="subSection"><ul><li><p>
				  Create a C# property for each document type property required, placing the property either on the Question class (for generic properties) or on the relevant
				  tab class (for any property on a tab). The built-in Umbraco data types
				  are available in the namespace <a href="9558e6f9-e80a-8c78-4333-f06cd398ddb6.htm">Felinesoft.UmbracoCodeFirst.DataTypes.BuiltIn</a>.
				</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACABABADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABABADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACABABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DocumentType(allowAtRoot: <span class="highlight-keyword">false</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Question : DocumentTypeBase
{
    ...

    <span class="highlight-preprocessor">#region</span> Tab Definitions
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> QuestionTab : TabBase
    {
        [ContentProperty(mandatory: <span class="highlight-keyword">true</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Textstring QuestionText { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        [ContentProperty(mandatory: <span class="highlight-keyword">true</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> MultipleTextstring Answers { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        [ContentProperty(mandatory: <span class="highlight-keyword">true</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Numeric CorrectAnswer { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    }

    ...

    <span class="highlight-preprocessor">#endregion</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABABADAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p><a href="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0.htm">Custom data types</a> can also be created for use as property types.
				  </p></td></tr></table></div><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
					The properties are declared as virtual because this enables <a href="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82.htm#lazy">lazy loading</a> when the document type is used as a model in a view.
				  </p></td></tr></table></div></li><li><p>
				  Add any pre-values which are needed on the properties, using <a href="7ba60a0c-d5b1-522f-c0c5-9d371d172e77.htm">InstancePreValueAttribute</a>s
				</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAAABADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAAABADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAAABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAAABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DocumentType(allowAtRoot: <span class="highlight-keyword">false</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Question : DocumentTypeBase
{
    ...

    <span class="highlight-preprocessor">#region</span> Tab Definitions
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> QuestionTab : TabBase
    {
        [ContentProperty(mandatory: <span class="highlight-keyword">true</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Textstring QuestionText { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        [ContentProperty(mandatory: <span class="highlight-keyword">true</span>)]
        [InstancePreValue(<span class="highlight-literal">"minItems"</span>, <span class="highlight-literal">"4"</span>)]
        [InstancePreValue(<span class="highlight-literal">"maxItems"</span>, <span class="highlight-literal">"4"</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> MultipleTextstring Answers { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        [ContentProperty(mandatory: <span class="highlight-keyword">true</span>)]
        [InstancePreValue(<span class="highlight-literal">"max"</span>, <span class="highlight-literal">"4"</span>)]
        [InstancePreValue(<span class="highlight-literal">"min"</span>, <span class="highlight-literal">"1"</span>)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Numeric CorrectAnswer { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    }

    ...

    <span class="highlight-preprocessor">#endregion</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAAABADAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
					Astute readers may have noticed that the above refers to pre-values "on properties", which is odd since Umbraco pre-values "belong" to data types not to property types.
					Code-First allows a fluent approach where "instance" pre-values can be used to automatically create a copy of a data type with specific pre-values applied for use on
					a given property. For example, the [InstancePreValue] attributes applied to the CorrectAnswer property will cause a new data type to be created named "Numeric (QuestionTab.CorrectAnswer)". This
					new data type will be used as the type of the CorrectAnswer property in Umbraco, and will have the specified pre-values applied.
				  </p><p><span class="media"><img alt="instance datatype" src="../media/instance_datatype.png" /></span></p></td></tr></table></div></li></ul></div><h3 class="procedureSubHeading">Adding Node-Picker Properties</h3><div class="subSection"><ul><li><p>
				  The Extras tab has a property via which multiple other documents can be selected by content authors. This is created by
				  adding a <a href="b3e13010-a239-4b6b-bc27-8711a5f00a6c.htm">Node Picker Property</a> to the tab, and specifying options
				  via a <a href="a7d63d44-2dc6-f703-a1c9-25e4d2474abb.htm">NodePickerConfigAttribute</a>.
				</p><p>
				  The Factoid type is another document type (shown in the code listing below). Using it as the generic argument to a DocumentPicker causes
				  the document picker to only allow that type of document to be selected in the back-office.
				</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAAAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAAAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAAAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAAAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ExtrasTab : TabBase
{
    [ContentProperty]
    [NodePickerConfig(maximumItems: <span class="highlight-number">3</span>, startNode: <span class="highlight-literal">"/Factoids"</span>, showEditButton: <span class="highlight-keyword">true</span>, showOpenButton: <span class="highlight-keyword">true</span>, showPathsWhenHovering: <span class="highlight-keyword">true</span>)]
    <span class="highlight-keyword">public</span> DocumentPicker&lt;Factoid&gt; Factoids { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; } = <span class="highlight-keyword">new</span> DocumentPicker&lt;Factoid&gt;();
}

...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAAAAADAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Caution note" /> Caution</th></tr><tr><td><p>
					The start node, specified as a path string in the NodePickerConfig attribute, may not be correctly set the first time the site is started
					because the path may not exist when the data types are first built. If the path does not exist the root will be used as the start node. This
					allows the path to be created in the content tree and, after restarting the app pool &amp; the site, the start node will be correctly set.
				  </p></td></tr></table></div></li></ul></div></div><div class="collapsibleAreaRegion" id="dat"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating Data Types</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
		  The Extras tab on the Question document calls for a custom data type, so that an image can be specified to go with the question. Custom data types are
		  created as classes and can derive from existing data types, in which case they use the existing type's property editor, or can implement a data type interface to
		  create an entirely new type with its own property editor. The QuestionImage type extends the ImageCropper built-in type. For information on creating properties
		  via the interfaces see <a href="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0.htm">Creating Custom Data Types</a>.
		</p><h3 class="procedureSubHeading">Create the Data Type Class</h3><div class="subSection"><ul><li><p>
				  The QuestionImage data type is an image cropper with custom crop sizes defined. Begin by creating a class named QuestionImage, which derives from
				  <a href="6cc8609c-159c-4925-89a9-61f14f77c665.htm">ImageCropper</a>. Decorate the class with a
				  <a href="0223039d-6947-a625-0536-e33a21af573a.htm">DataTypeAttribute</a>.
				</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAACAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAACAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">  [DataType]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> QuestionImage : ImageCropper
{

}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAAACAAA");</script></li><li><p>
				  Add properties of type <a href="05471fe5-0816-82ac-fedc-d29d584ad632.htm">ImageCrop</a> for each required
				  crop size, and decorate each property with an <a href="de34e734-7f6a-3e13-4687-ac72f5f3a9bf.htm">ImageCropPropertyAttribute</a>
				  specifying the required width and height.
				</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">  [DataType]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> QuestionImage : ImageCropper, IHtmlString
{
    [ImageCropProperty(<span class="highlight-number">50</span>, <span class="highlight-number">50</span>)]
    <span class="highlight-keyword">public</span> ImageCrop Small { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [ImageCropProperty(<span class="highlight-number">100</span>, <span class="highlight-number">100</span>)]
    <span class="highlight-keyword">public</span> ImageCrop Medium { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [ImageCropProperty(<span class="highlight-number">200</span>, <span class="highlight-number">200</span>)]
    <span class="highlight-keyword">public</span> ImageCrop Large { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAACAAA");</script></li><li><p>
				  Finally, add a property of type QuestionImage to the Extras tab.
				</p><p>
				  The Factoid type is another document type (shown in the code listing below). Using it as the generic argument to a DocumentPicker causes
				  the document picker to allow only that type of document to be selected in the back-office.
				</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAAAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAAAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAAAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAAAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">...

<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ExtrasTab : TabBase
{
    [ContentProperty]
    [NodePickerConfig(maximumItems: <span class="highlight-number">3</span>, startNode: <span class="highlight-literal">"/Factoids"</span>, showEditButton: <span class="highlight-keyword">true</span>, showOpenButton: <span class="highlight-keyword">true</span>, showPathsWhenHovering: <span class="highlight-keyword">true</span>)]
    <span class="highlight-keyword">public</span> DocumentPicker&lt;Factoid&gt; Factoids { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; } = <span class="highlight-keyword">new</span> DocumentPicker&lt;Factoid&gt;();

    [ContentProperty]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> QuestionImage Image { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}

...</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAAAAACAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
					It is customary to add the image cropper to a media type then add a media picker to the document type, allowing re-use of images across
					the site. However if appropriate it can work just as well to put the image cropper directly on the document type, as shown here.
				  </p></td></tr></table></div></li></ul></div></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>