<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Working With Media Types</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="79ea8886-41e6-4691-9d55-4c3fc3be5310" /><meta name="Description" content="Working with media types is almost identical to . The familiar [ContentProperty], [ContentTab] and [ContentComposition] attributes are used and the same rules apply for inheritance &amp; composition." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Felinesoft Code-First for Umbraco<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Felinesoft Code-First for Umbraco" tocid="roottoc">Felinesoft Code-First for Umbraco</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Getting Started" tocid="04441c6f-baf5-4f66-a724-d0107a13af66">Getting Started</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="79ea8886-41e6-4691-9d55-4c3fc3be5310.htm" title="Working With Media Types" tocid="79ea8886-41e6-4691-9d55-4c3fc3be5310">Working With Media Types</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ad6f1d90-a21d-4b5b-829f-a70b16539b4f.htm" title="ImageCropper" tocid="ad6f1d90-a21d-4b5b-829f-a70b16539b4f">ImageCropper</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/feline.png" /></td><td class="titleColumn">Working With Media Types</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        Working with media types is almost identical to <a href="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82.htm">Working With Document Types</a>. The familiar [ContentProperty], [ContentTab] and 
        [ContentComposition] attributes are used and the same rules apply for inheritance &amp; composition. The main difference is the use of the [MediaType] class attribute,
        the use of the MediaTypeBase base class, the fact that media types don't support [Template] attributes &amp; the inclusion of a handful of specialised helper attributes which can be
        used to create "magic" media properties more fluently.
      </p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#builtin">The Built-In Media Types</a></li><li class="outlineSectionEntry"><a href="#disableBuiltIn">Overriding the Built-In Media Types</a></li><li class="outlineSectionEntry"><a href="#create">Creating a Media Type</a></li><li class="outlineSectionEntry"><a href="#helperAttrs">Media Type Helper Attributes</a></li></ul></div><div class="collapsibleAreaRegion" id="builtin"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The Built-In Media Types</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          Out-of-the box Umbraco contains three media types; file, image &amp; folder. There are built-in code-first implementations of these types, which
          reflect the unmodified default state of those items. You can use the built-in versions if you don't need to modify or control the default media types
          beyond their default settings. The built-in implementations are:
      </p><ul><li><p><a href="8b998dc2-dbcf-ebb0-3389-acc25b0f496e.htm">MediaFolder</a></p></li><li><p><a href="74997157-921c-d2a9-122d-60305a002c99.htm">MediaFile</a></p></li><li><p><a href="d31b676d-efa1-d615-8bb4-9f29feb11c55.htm">MediaImage</a></p></li></ul><p>
          By default all extant media types will be allowed as children of the built-in Folder type, automatically including any new media types
          you define with code-first. This behaviour can be toggled off using:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">CodeFirstManager.Current.Features.AllowAllMediaTypesInDefaultFolder = <span class="highlight-keyword">false</span>;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAEAAA");</script><p>You can also toggle off the built-in media types completely using:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">CodeFirstManager.Current.Features.UseBuiltInMediaTypes = <span class="highlight-keyword">false</span>;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAEAAA");</script></div><div class="collapsibleAreaRegion" id="disableBuiltIn"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Overriding the Built-In Media Types</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          One can toggle the built-in media types off when one needs direct control over Umbraco's default media types (addition of tabs/properties, more control
          over allowed children, change icons etc), which is not possible when the code for them is inside a third-party package. Code-first
          includes some base types to quickly facilitate mapping custom code-first types onto the default media types. From there the media
          types can be extended and customised just like any other code-first type. In the following example the three default media types are mapped in user code and
          have their icons changed to the circus icon.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[MediaType(icon: BuiltInIcons.IconCircus)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Image : MediaImageBase { }

[MediaType(mediaTypeAlias: <span class="highlight-literal">"file"</span>, icon: BuiltInIcons.IconCircus)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> FileUpload : MediaFileBase { }

[MediaType(icon: BuiltInIcons.IconCircus)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Folder : MediaFolderBase { }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABADAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p>
            The mapping of the classes to the Umbraco types is dependent on alias. The code above only works because the aliases match those
            of the default Umbraco types. The FileUpload declaration in the example shows how the attribute can be used to override the alias value
            if you'd like the class name to differ from Umbraco's default naming whilst still maintaining the mapping.
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="create"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating a Media Type</span></div><div id="ID3RBSection" class="collapsibleSection"><p>The following code creates a media type named Example Media Type with alias exampleMediaType containing a file upload property, a file
        size property and a description property. All properties are on a tab named Attachment.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[MediaType]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ExampleMediaType : MediaTypeBase
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AttachmentTab : TabBase
    {
        [ContentProperty(alias: SpecialAliases.FileUpload)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Upload File { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        [ContentProperty(alias: SpecialAliases.FileSize)]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Label Size { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        [ContentProperty]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Textstring Description { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    }

    [ContentTab]
    <span class="highlight-keyword">public</span> AttachmentTab Attachment { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="helperAttrs"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Media Type Helper Attributes</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          The SpecialAliases strings used above are special aliases defined by Umbraco which illicit particular responses from the Umbraco back-end (triggering a file upload,
          auto-populating a property with the file's size etc). There are some helper attributes which automatically apply the correct alias to a property, which can
          result in slightly neater code.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[MediaType]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ExampleMediaType : MediaTypeBase
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AttachmentTab : TabBase
    {
        [FileUploadProperty]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Upload File { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        [FileSizeProperty]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Label Size { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

        [ContentProperty]
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">virtual</span> Textstring Description { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
    }

    [ContentTab]
    <span class="highlight-keyword">public</span> AttachmentTab Attachment { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABAAA");</script><p>
          The available attributes are:
        </p><ul><li><p><a href="67584a25-cca1-9e50-309b-f2849765d402.htm">FileExtensionPropertyAttribute</a></p></li><li><p><a href="84e29bde-6adb-c018-0399-d43818d2c2df.htm">FileSizePropertyAttribute</a></p></li><li><p><a href="9b79080f-9712-0ca4-d0da-93b81e21f00c.htm">FileUploadPropertyAttribute</a></p></li><li><p><a href="4407fd49-9eb0-a2e0-b577-c7735726848e.htm">ImageHeightPropertyAttribute</a></p></li><li><p><a href="8521848b-1b32-72fc-abab-6e25010557e5.htm">ImageWidthPropertyAttribute</a></p></li></ul></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>