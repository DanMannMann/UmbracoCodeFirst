<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Working With Data Types</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="ea9b7789-8c43-48af-9c5e-7860e55cabe1" /><meta name="Description" content="Data types in code-first are represented by data type classes. Properties whose types are such a class can be added to document type classes in order to add properties of those data types to that document type." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">Felinesoft Code-First for Umbraco<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Felinesoft Code-First for Umbraco" tocid="roottoc">Felinesoft Code-First for Umbraco</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="04441c6f-baf5-4f66-a724-d0107a13af66.htm" title="Getting Started" tocid="04441c6f-baf5-4f66-a724-d0107a13af66">Getting Started</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ea9b7789-8c43-48af-9c5e-7860e55cabe1.htm" title="Working With Data Types" tocid="ea9b7789-8c43-48af-9c5e-7860e55cabe1">Working With Data Types</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0.htm" title="Creating Custom Data Types" tocid="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0">Creating Custom Data Types</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="f13fc6da-38dc-4585-b0f3-e701d17d03e1.htm" title="Working With Pre-Values" tocid="f13fc6da-38dc-4585-b0f3-e701d17d03e1">Working With Pre-Values</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="787d469d-06cb-4ba1-8b13-d889e1b88c72.htm" title="Using Code-First with Umbraco Property Editor Value Converters" tocid="787d469d-06cb-4ba1-8b13-d889e1b88c72">Using Code-First with Umbraco Property Editor Value Converters</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="47c8c745-bef7-41c6-bd7a-d3424c627e78.htm" title="Registering Existing Classes as Data Types" tocid="47c8c745-bef7-41c6-bd7a-d3424c627e78">Registering Existing Classes as Data Types</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/feline.png" /></td><td class="titleColumn">Working With Data Types</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        Data types in code-first are represented by data type classes. Properties whose types are such a class can
        be added to document type classes in order to add properties of those data types to that document type.
      </p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#builtin">Using the built-in data types</a></li><li class="outlineSectionEntry"><a href="#extended">Extending the built-in data types</a></li><li class="outlineSectionEntry"><a href="#inline">Creating data type instances directly on document types</a></li><li class="outlineSectionEntry"><a href="#pevc">Using Umbraco's Property Converters</a></li></ul></div><div class="collapsibleAreaRegion" id="builtin"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Using the built-in data types</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          The built-in data types in Umbraco are represented by classes in the <a href="9558e6f9-e80a-8c78-4333-f06cd398ddb6.htm">Felinesoft.UmbracoCodeFirst.DataTypes.BuiltIn</a> namespace.
          The example below shows how to use the built in "Approved Color" data type as a property in a document type.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DocumentType]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CodeFirstExampleDocument : DocumentTypeBase
{
    <span class="highlight-comment">//The ColorPicker type from the DataTypes.BuiltIn namespace is one of many such types</span>
    <span class="highlight-comment">//in that namespace which correspond to Umbraco's built-in data types. Using a built-in</span>
    <span class="highlight-comment">//data type for a property is as simple as adding a property of that type to your document type class</span>
    <span class="highlight-comment">//and decorating that property with a ContentProperty attribute.</span>
    [ContentProperty]
    <span class="highlight-keyword">public</span> ColorPicker ColorPicker { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAEAAA");</script></div><div class="collapsibleAreaRegion" id="extended"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extending the built-in data types</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          The built-in data types can be extended to provide custom instances with specific configurations. For instance the Approved Color picker
          used in the previous example allows a single list of approved colors to be set via pre-values. There is usually a requirement to have
          a few different color lists for different uses. This can be achieved by extending the ColorPicker class and specifying some new pre-values.
        </p><p>
          The example below defines a data type named "Approved Background Color" which uses the same editor, storage and converters as the
          ColorPicker type but specifies a new list of allowed colors via <a href="f5e6f70d-9ca8-943c-7ea2-d0bba8a1135b.htm">PreValueAttribute</a>s.
          See <a href="f13fc6da-38dc-4585-b0f3-e701d17d03e1.htm">Working with Pre-Values</a> for more information.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DataType]
[PreValue(<span class="highlight-literal">"1"</span>, <span class="highlight-literal">"111111"</span>)]
[PreValue(<span class="highlight-literal">"2"</span>, <span class="highlight-literal">"222222"</span>)]
[PreValue(<span class="highlight-literal">"3"</span>, <span class="highlight-literal">"333333"</span>)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ApprovedBackgroundColor : ColorPicker { }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="inline"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating data type instances directly on document types</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          An instance of a data type can be created specifically for a certain property on a document type, by applying a 
          <a href="0c50e923-e485-2c6f-f74d-a52c6f362fda.htm">DataTypeInstanceAttribute</a>
          to the property. <a href="f13fc6da-38dc-4585-b0f3-e701d17d03e1.htm#instance">Instance Pre-Value Attributes</a> can be applied to the property
          to specify pre-values for the unique instance.
        </p><p>
          The example below defines a property named "Approved Background Color". A unique data type instance is created which uses the same editor, storage and converters as the
          ColorPicker type and is named "ColorPicker (CodeFirstExampleDocument.ApprovedBackgroundColor)". Pre-values can then be specified which are unique to this property.
          The example specifies a new list of allowed colors via <a href="7ba60a0c-d5b1-522f-c0c5-9d371d172e77.htm">InstancePreValueAttribute</a>s.
          See <a href="f13fc6da-38dc-4585-b0f3-e701d17d03e1.htm">Working with Pre-Values</a> for more information.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[DocumentType]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CodeFirstExampleDocument : DocumentTypeBase
{
    [ContentProperty]
    [DataTypeInstance]
    [InstancePreValue(<span class="highlight-literal">"1"</span>, <span class="highlight-literal">"111111"</span>)]
    [InstancePreValue(<span class="highlight-literal">"2"</span>, <span class="highlight-literal">"222222"</span>)]
    [InstancePreValue(<span class="highlight-literal">"3"</span>, <span class="highlight-literal">"333333"</span>)]
    <span class="highlight-keyword">public</span> ColorPicker ApprovedBackgroundColor { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="pevc"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Using Umbraco's Property Converters</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          Code-first also supports using Umbraco's property editor value converters via <a href="787d469d-06cb-4ba1-8b13-d889e1b88c72.htm">subtly different syntax</a>. 
          This can remove the need for creating custom code-first data types to wrap 3rd party property editors you are using.
          Support for value converters is limited to published content and does not allow working with IContent. This prevents modifying and persisting
          content from code using the code-first models but it gives control over the value serialisation to the editor's author, which is probably the best place for it.
          I find Code-first data type implementations generally richer and more flexible, but the cleanliness and separation afforded by using Umbraco's own types
          may appeal just as much in many circumstances.
        </p></div></div></div><div id="pageFooter" class="pageFooter" /></body></html>