<?xml version="1.0" encoding="utf-8"?>
<topic id="ea9b7789-8c43-48af-9c5e-7860e55cabe1" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <autoOutline />

      <para>
        Data types in code-first are represented by data type classes. Properties whose types are such a class can
        be added to document type classes in order to add properties of those data types to that document type.
      </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="builtin">
      <title>Using the built-in data types</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          The built-in data types in Umbraco are represented by classes in the <codeEntityReference qualifyHint="false">N:Felinesoft.UmbracoCodeFirst.DataTypes.BuiltIn</codeEntityReference> namespace.
          The example below shows how to use the built in "Approved Color" data type as a property in a document type.
        </para>
        <code language="c#">
          [DocumentType]
          public class CodeFirstExampleDocument : DocumentTypeBase
          {
              //The ColorPicker type from the DataTypes.BuiltIn namespace is one of many such types
              //in that namespace which correspond to Umbraco's built-in data types. Using a built-in
              //data type for a property is as simple as adding a property of that type to your document type class
              //and decorating that property with a DocumentProperty attribute.
              [DocumentProperty]
              public ColorPicker ColorPicker { get; set; }
          }
        </code>
      </content>
    </section>

    <section address="extended">
      <title>Extending the built-in data types</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          The built-in data types can be extended to provide custom instances with specific configurations. For instance the Approved Color picker
          used in the previous example allows a single list of approved colors to be set via pre-values. There is usually a requirement to have
          a few different color lists for different uses. This can be achieved by extending the ColorPicker class and specifying some new pre-values.
        </para>
        <para>
          The example below defines a data type named "Approved Background Color" which uses the same editor, storage and converters as the
          ColorPicker type but specifies a new list of allowed colors via <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.PreValueAttribute</codeEntityReference>s.
          See <link xlink:href ="f13fc6da-38dc-4585-b0f3-e701d17d03e1">Working with Pre-Values</link> for more information.
        </para>
        <code language="c#">
          [DataType]
          [PreValue("1", "111111")]
          [PreValue("2", "222222")]
          [PreValue("3", "333333")]
          public class ApprovedBackgroundColor : ColorPicker { }
        </code>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
