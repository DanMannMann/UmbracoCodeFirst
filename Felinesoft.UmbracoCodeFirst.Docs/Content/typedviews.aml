<?xml version="1.0" encoding="utf-8"?>
<topic id="844edfcf-ec79-489e-85fb-e07b441af825" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->


      <para>The Code-First package includes a special Razor view base class which
      provides access to strongly typed document models &amp; a HtmlHelper instance
      configured to provide helper methods for the document type.</para>
      <autoOutline />
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Setting Up a View to Use Strongly-Typed Document Models</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>The <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Views.UmbracoDocumentViewPage`1</codeEntityReference> view base class
        is used with strongly-typed models. It inherits from UmbracoViewPage and provides everything you'd normally find in an Umbraco view, along with extra
        properties for the Document Model &amp; the Document Helper.
      </para>
        <para>To start using the view simply add the following line as the first line in your cshtml file, replacing any existing @model or @inherits declaration. T should
        be the Code-First type of the documents which use the view.</para>
        <code language="c#">
          @inherits Felinesoft.UmbracoCodeFirst.Views.UmbracoDocumentViewPage&lt;T&gt;
        </code>
      </content>
    </section>

    <section address="Section2">
      <title>Implementing a Strongly-Typed View</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          In a strongly-typed view the @Document property can be used to access the strongly typed document. The familiar properties of an Umbraco view (@CurrentPage, @Model etc)
          continue to function as normal. The @DocumentHelper property provides access to a HtmlHelper&lt;T&gt;, where T is the document type. The properties, tabs and compositions
          of the document can be accessed as you'd expect. All of the non-collection-based built-in data types either implement IHtmlString or override ToString to give the correct
          output without accessing any properties or methods of the data type explicitly, as in the example below.
        </para>
        <code language="xml">
          @inherits Felinesoft.UmbracoCodeFirst.Views.UmbracoDocumentViewPage&lt;Felinesoft.UmbracoCodeFirst.Demo.DocTypes.TestPage&gt;
          @using Felinesoft.UmbracoCodeFirst.Demo.DocTypes;
          @using Felinesoft.UmbracoCodeFirst.Linq;

          @{
              Layout = "Layout.cshtml";
    
              //A strongly-typed model of the homepage node, obtained using the Code-First LINQ extension NearestAncestor&lt;T&gt;
              Home homepage = Document.NearestAncestor&lt;Home&gt;();
          }
	          &lt;body&gt;

		          &lt;!-- Page Wrapper --&gt;
			          &lt;div id="page-wrapper"&gt;

				          &lt;!-- Header --&gt;
					          &lt;header id="header"&gt;
						          &lt;h1&gt;&lt;a href="/"&gt;@(homepage.SiteName)&lt;/a&gt;&lt;/h1&gt;
						          @{ Html.RenderPartial("umbNavigation", homepage.NavigationItems); }
					          &lt;/header&gt;

				          &lt;!-- Main --&gt;
					          &lt;article id="main"&gt;
						          &lt;header&gt;
							          &lt;h2&gt;@Document.Content.Title&lt;/h2&gt;
							          &lt;img src="@Document.Content.HeaderImage" /&gt;
						          &lt;/header&gt;
						          &lt;section class="wrapper style2"&gt;
							          &lt;div class="inner"&gt;
                        &lt;div class="byline"&gt;@Document.Content.Byline&lt;/div&gt;
                        &lt;div class="article"&gt;@Document.Content.ArticleBody&lt;/div&gt;
							          &lt;/div&gt;
						          &lt;/section&gt;
                      &lt;section class="wrapper style4"&gt;
							          &lt;div class="inner"&gt;
                          &lt;p&gt;@Document.AddressLabel&lt;/p&gt;
								          &lt;p&gt;@DocumentHelper.DisplayFor(model =&gt; model.Address)&lt;/p&gt;
							          &lt;/div&gt;
						          &lt;/section&gt;
                      &lt;section class="wrapper style2"&gt;
							          &lt;div class="inner"&gt;
                        &lt;a href="@Document.TypedContentPicker"&gt;Link to document @Document.TypedContentPicker.Name&lt;/a&gt;
							          &lt;/div&gt;
						          &lt;/section&gt;
				          &lt;!-- Footer --&gt;
						      @{ Html.RenderPartial("umbFooter"); }
			          &lt;/div&gt;
        </code>
      </content>
    </section>
    
    <section address="Section3">
      <title>The Code-First RenderMvcController</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>The <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Controllers.CodeFirstController</codeEntityReference> class can be used
        as a replacement for Umbraco's default RenderMvcController implementation. It functions exactly the same except it passes the strongly-typed document as the model
        to the view if a strongly-typed conversion is possible. If no conversion is possible the usual RenderModel instance is passed, making it safe to use a mix of code-first and
        ordinary Umbraco workflows.
      </para>
        <para>
          Any view which inherits UmbracoViewPage&lt;Tdocument&gt; or specifies @model Tdocument can be used with the <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Controllers.CodeFirstController</codeEntityReference>.
          The @Model property will contain the document instance.
        </para>
        <para>
          The controller can be overridden as follows.
        </para>
        <code language="c#">
          public class CustomApplicationEventHandler : ApplicationEventHandler
          {
              protected override void ApplicationStarting(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)
              {
                  DefaultRenderMvcControllerResolver.Current.SetDefaultControllerType(typeof(Felinesoft.UmbracoCodeFirst.Controllers.CodeFirstController));
                  base.ApplicationStarting(umbracoApplication, applicationContext);
              }
          }
        </code>
        <alert class="tip">
          <para>See the entry on custom controllers on 
            <externalLink>
              <linkText>Our Umbraco</linkText>
              <linkAlternateText>Custom controllers on Our Umbraco</linkAlternateText>
              <linkUri>https://our.umbraco.org/documentation/Reference/Templating/Mvc/custom-controllers</linkUri>
              <linkTarget>_blank</linkTarget>
            </externalLink>
          </para>
        </alert>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
