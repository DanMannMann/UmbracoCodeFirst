<?xml version="1.0" encoding="utf-8"?>
<topic id="b3e13010-a239-4b6b-bc27-8711a5f00a6c" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
        <para>
          Code-first includes generic content node pickers designed to work with code-first content types. The node pickers
          use the MultiNodeTreePicker property editor, setting the filter value so that only content items of the
          correct type can be picked in the back-office. All of the pickers come in single (minimum selection 0, maximum selection 1)
          or multi (minimum 0, no maximum) flavours.
        </para>
       <autoOutline /> 
    </introduction>

    <section address="single">
      <title>Using single node pickers</title>
      <content>
        <para>
          In the following example single document &amp; media pickers are declared. The document picker only allows
          a single ExampleDocument node to be picked, or none. The media picker only allows a single ExampleMedia node to be
          picked, or none.
        </para>
        <code>
            [ContentProperty]
            public virtual SingleMediaPicker&lt;ExampleMedia&gt; PickedMedia { get; set; }

            [ContentProperty]
            public virtual SingleDocumentPicker&lt;ExampleDocument&gt; PickedDocument { get; set; }
        </code>
        <alert class="important">
          <para>
            Lazy loading is particularly important for node picker properties. The chosen nodes are converted to strongly-typed models
            when the property is initialised, which can represent a not-insignificant overhead which should be avoided when the property
            is not being used. Of course there is also huge benefit in ensuring that the properties of the picked nodes themselves are
            also lazy loaded. In a multi-picker there could theoretically be up to 536 million nodes to convert when the property is accessed
            (<externalLink>
              <linkText>maximum list size on StackOverflow</linkText>
              <linkAlternateText>maximum list size on StackOverflow</linkAlternateText>
              <linkUri>http://stackoverflow.com/questions/3906891/what-is-the-max-limit-of-data-into-liststring-in-c</linkUri>
            </externalLink>)
            so ensuring that each of those is not fully loaded on initialisation is obviously invaluable. In fact the performance impact
            even with a single picker is often noticable, depending on the complexity of the picked item.
          </para>
        </alert>
        <para>
          In a view the pickers above could be used as shown below.
        </para>
        <code language="xml" title="razor">
          &lt;section class="wrapper style4"&gt;
            &lt;div class="inner"&gt;
              &lt;div&gt;
	              @Document.PickedDocument.PickedItem.SomePropertyOfSelectedDocumentItem
              &lt;/div&gt;
              &lt;a href="@Document.PickedDocument"&gt;@Document.PickedDocument.Name&lt;/a&gt;
            &lt;/div&gt;
            &lt;/section&gt;

            &lt;section class="wrapper style4"&gt;
            &lt;div class="inner"&gt;
              &lt;div&gt;
	              @Document.PickedMedia.PickedItem.SomePropertyOfSelectedMediaItem
              &lt;/div&gt;
              &lt;a href="@Document.PickedMedia"&gt;@Document.PickedMedia.Name&lt;/a&gt;
            &lt;/div&gt;
          &lt;/section&gt;
        </code>
      </content>
    </section>

    <section address="multi">
      <title>Using multiple node pickers</title>
      <content>
        <para>
          The multiple node pickers are used in much the same way as the single ones. The key difference is they don't expose a PickedItem property, as more
          than one item can be picked. Instead, in your view, you use the enumerable Items property to iterate over the items or use the [int] indexer to access them directly.
        </para>
        <code>
          [ContentProperty]
          public virtual MediaPicker&lt;ExampleMedia&gt; ManyPickedMedias { get; set; }

          [ContentProperty]
          public virtual DocumentPicker&lt;ExampleDocument&gt; ManyPickedDocuments { get; set; }
        </code>
        <code language="xml" title="razor">
          @foreach(var item in Document.ManyPickedDocuments)
          {
            &lt;div class="inner"&gt;
              &lt;div&gt;
	              @item.SomePropertyOfSelectedDocumentItem
              &lt;/div&gt;
              &lt;a href="@item.NodeDetails.Url"&gt;@item.NodeDetails.Name&lt;/a&gt;
            &lt;/div&gt;
          }
        </code>
      </content>
    </section>

    <section address="attributes">
      <title>Picker Attributes</title>
      <content>
        <para>
          You can short-circuit the generic picker type &amp; use the picked item type directly by
          applying a picker attribute to a property. The first two properties below produce identical
          functionality in the back-office, but the first one short-circuits the picker in
          model building and sets the picked item directly on the content type property. This
          leads to neater view code, but comes at the trade-off of decreased compile-time type safety. 
          The generic picker's type constraints will always ensure an appropriate type is selected
          at compile-time, whereas the attribute approach can lead to exceptions at initialisation time
          if the attribute is applied to an inappropriate property.
        </para>
        <code>
          [MediaPickerProperty]
          public virtual MediaImage ExampleImage { get; set; }

          [ContentProperty]
          public virtual SingleMediaPicker&lt;MediaImage&gt; ExampleImagePicker { get; set; }

          [DocumentPickerProperty]
          public virtual ExampleDocumentType ExampleDocument { get; set; }
        </code>
        <para>
          You can also short-circuit multiple pickers in the same way, except specifying
          IEnumberable&lt;ContentType&gt; as the property type.
        </para>
        <code>
          [MediaPickerProperty]
          public virtual IEnumberable&lt;MediaImage&gt; ExampleImage { get; set; }

          [DocumentPickerProperty]
          public virtual IEnumberable&lt;ExampleDocumentType&gt; ExampleDocument { get; set; }
        </code>
        <alert class="tip">
          <para>
            Picker attributes can still be used alongside NodeConfig attributes (see below)
          </para>
        </alert>
      </content>
    </section>

    <section address="nodeconfig">
      <title>Modifying Picker Behaviour With NodeConfig Attributes</title>
      <content>      
        <para>
          Both multi- and single-pickers can be further configured using the 
          <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.NodePickerConfigAttribute</codeEntityReference>,
          which can be applied to either a node picker data type or a node picker property. The attribute can be used to control the minimum
          &amp; maximum number of pickable nodes, the start node for the picker tree &amp; any additional node types 
          which should also be allowed to be picked on top of the one specified in the generic parameter.
        </para>
      </content>
      <sections>
        <section>
          <title>Minimum &amp; maximum node count</title>
          <content>
            <para>
              This property specifies a multi-picker with a minimum
              selection of 5 nodes &amp; a maximum selection of 10 nodes
            </para>
            <code>
              [ContentProperty]
              [NodePickerConfig(minimumItems: 5, maximumItems: 10)]
              public virtual DocumentPicker&lt;ExampleDocument&gt; Document { get; set; }
            </code>
          </content>
        </section>
        <section>
          <title>Allowed node types</title>
          <content>
            <para>
              This property specifies a single-picker where selecting a value is mandatory, and the total
              set of allowed types in the picker tree is ExampleMedia, ExampleMediaSubtype &amp; AnotherExampleMediaSubtype
            </para>
            <code>
              [MediaPickerProperty]
              [NodePickerConfig(minimumItems: 1, allowedDescendants: new Type[] { typeof(ExampleMediaSubtype), typeof(AnotherExampleMediaSubtype) })]
              public virtual ExampleMedia Media { get; set; }
            </code>
            <alert class="important">
              <para>
                All the types supplied in the allowedDescendants array must be descended from the
                type T specified in the generic type argument (or the type of the property if a picker attribute is used).
              </para>
            </alert>
            <para>
              Note that code-first converts the picked nodes directly into T during model building, so you can't cast the items in the collection to the
              more derived types, nor use the is/as keywords to determine the more derived type and work with it. If you need to access the more derived
              type you can switch on the node type alias and call item.NodeDetails.PublishedContent.ConvertToModel&lt;RelevantType&gt;() to reconvert the content node into its
              "full" type.
            </para>
            <para>
              The reason that code-first converts directly to T instead of converting to the full type and inserting that into the collection is that
              Razor views expect a particular concrete type &amp; will throw exceptions if you pass a descendant type, so in the majority of useful circumstances (e.g. iterate over
              picked items and pass them to a particular partial view for rendering) you actually want the concrete type T, not some more derived type.
            </para>
          </content>
        </section>
        <section>
          <title>Start Node by Path</title>
          <content>
            <para>
              This property specifies a single-picker where the start node for
              the picker tree is at the path /home/pickableNodes. If the path
              is not found at runtime then the picker will fall back on starting the
              picker tree at root.
            </para>
            <para>
              The maximumItems setting is ignored, as single-pickers always override this value
              with 1.
            </para>
            <code>
              [ContentProperty]
              [NodePickerConfig(maximumItems: 10, startNode:"/home/pickableNodes", startNodeSpecifier:StartNodeSpecifier.Path)]
              public virtual SingleDocumentPicker&lt;ExampleDocument&gt; Document { get; set; }
            </code>
          </content>
        </section>
        <section>
        <title>Start Node by ID</title>
        <content>
          <para>
            This property specifies a single-picker where the start node for
            the picker tree has ID 1064. If the ID is not found at runtime then the
            picker will fall back on starting the picker tree at root.
            Picking a value for this node is mandatory because minimumItems is set to 1.
          </para>
          <code>
            [ContentProperty]
            [NodePickerConfig(minimumItems: 1, startNode: "1064", startNodeSpecifier: StartNodeSpecifier.Id)]
            public virtual SingleMediaPicker&lt;ExampleMedia&gt; Document { get; set; }
          </code>
        </content>
      </section>       
      </sections>
    </section>

    <relatedTopics>
    </relatedTopics>
  </developerConceptualDocument>
</topic>
