<?xml version="1.0" encoding="utf-8"?>
<topic id="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <autoOutline />

      <para>
        In Code-First data types are represented by classes which <link xlink:href="cb1301cc-cf88-4b2a-a662-3611bd2634e1">implement certain interfaces</link> and are decorated with
        a <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.DataTypeAttribute</codeEntityReference>.
      </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="datatype">
      <title>Creating a data type</title>
      <content>
        <para>
          The <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.DataTypeAttribute</codeEntityReference> can be used to specify the name, property editor alias
          and database storage type for the data type. The name and data storage type can be inferred from the class name and the implemented interface and so usually needn't be specified.
          However it is not possible to correctly infer the property editor alias, so this has to be specified explicitly.
        </para>
        <para>
          The example below creates a data type with name "Address Data Type", stored to the database as Ntext and passed to/from the converter methods as a string. The data type
          uses a custom property editor which has alias "CodeFirst.JsonAddressEditor".
        </para>
        <code language="c#">
          [DataType(propertyEditorAlias: "CodeFirst.JsonAddressEditor")]
          public class AddressDataType : IUmbracoNtextDataType
          {
              //insert custom modelling and logic for the data type
          }
        </code>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    <section address="implementing">
      <title>Implementing the data type</title>
      <content>
        <para>
          The data type interfaces specify two methods, Serialize and Initialize. Implementing these allows instances of the data type to be persisted and
          retrieved from the Umbraco database. This allows strongly-typed views using the code-first document &amp; data types, and allows content to be
          created, updated and persisted programmatically using the code-first models.
        </para>
        <para>
          Initialize is called when the data type is being constructed during rendering. It takes a single argument of type T. 
          This method should set the values of the data type instance's properties according
          to the value passed in.
        </para>
        <para>
          Serialize is called whenever an instance is to be persisted to the database by the code-first core. It should return the data type instance
          serialised to type T.
        </para>
        <para>
          The example below shows the implementation of the AddressDataType. It has properties for the constituent parts of the address. These properties are populated
          by the Initialise method. The Initialise method assumes its input string contains a valid Json representation of aforementioned properties, as this is the format
          used by the property editor when it saves the value.
        </para>
        <code language="c#">
          [DataType(propertyEditorAlias: "CodeFirst.JsonAddressEditor")]
          public class AddressDataType : IUmbracoNtextDataType, IHtmlString
          {
              public int PropertyNumber { get; set; }
              public string AddressLine1 { get; set; }
              public string AddressLine2 { get; set; }
              public string City { get; set; }
              public string PostalCode { get; set; }

              public void Initialise(string dbValue)
              {
                  JsonConvert.PopulateObject(dbValue, this);
              }

              public string Serialise()
              {
                  return JsonConvert.SerializeObject(this, Formatting.Indented);
              }

              //Properties can be explicitly ignored by the Json serialiser using this attribute
              [JsonIgnore]
              public string Region
              {
                  get
                  {
                      return string.Format("{0}, {1}", City, PostalCode);
                  }
              }

              //Implementing IHtmlString is a convenient way to set up consistent
              //formatting for use in views. Using @Document.AddressProperty in a Razor view
              //will automatically call ToHtmlString on the object and output the resultant raw string
              //to the page. Remember to sanitize your inputs!
              public string ToHtmlString()
              {
                  return string.Format("&lt;p&gt;{0} {1}&lt;br /&gt;{2}&lt;br /&gt;{3}&lt;br /&gt;&lt;br /&gt;{4}&lt;/p&gt;",
                                  PropertyNumber,
                                  HttpUtility.HtmlEncode(AddressLine1),
                                  HttpUtility.HtmlEncode(AddressLine2),
                                  HttpUtility.HtmlEncode(City),
                                  HttpUtility.HtmlEncode(PostalCode));
              }
          }
        </code>
      </content>
    </section>

    <section address="nologic">
      <title>Data types without conversion logic</title>
      <content>
        <para>
          It is possible to create a data type without implementing the data type interface. This is useful for keeping your code cleaner if you don't intend to use
          strongly-typed views or create/update content programmatically. In this case the database storage type can be specified using the
          <codeEntityReference qualifyHint="false">P:Felinesoft.UmbracoCodeFirst.Attributes.DataTypeAttribute.DbType</codeEntityReference> property of the
          DataTypeAttribute applied to the class. You must also set useConverter to false in the attribute constructor - setting the converter to null is not
          sufficient, the code-first manager will attempt to construct a default converter unless explicitly told not to.
        </para>
        <code language="c#">
          [DataType(propertyEditorAlias: "CodeFirst.JsonAddressEditor", dbType: DataTypeDatabaseType.Ntext, useConverter: false)]
          public class AddressDataType
          {
              ...
          }
        </code>
      </content>
    </section>

    <section address="factory">
      <title>Data types using a separate class for conversion</title>
      <content>
        <para>
          It is possible to implement your conversion logic on a separate class to your data type model. This can be done by creating a class which implements
          <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Converters.IDataTypeConverter</codeEntityReference>. Be aware that more runtime
          type resolution is needed for this approach so it isn't as safe at compile-time as implementing the converion logic on the data type itself.
        </para>
        <para>
          The best approach to implementing the conversion factory is to inherit the abstract 
          <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Converters.DataTypeConverterBase`2</codeEntityReference> class, specifying 
          the output type of the property editor as Tdb and the target data type as Tentity.
        </para>
        <code>
          public class AddressDataTypeConverter : DataTypeConverterBase&lt;string,AddressDataType&gt;
          {
              public override AddressDataType Create(string input)
              {
                  return JsonConvert.DeserializeObject&lt;AddressDataType&gt;(input);
              }

              public override string Serialise(AddressDataType input)
              {
                  return JsonConvert.SerializeObject(input, Formatting.Indented);
              }
          }
        </code>
        <para>
          The converter type can be specified in the DataTypeAttribute in order to associate it with the data type.
        </para>
        <code language="c#">
          [DataType(propertyEditorAlias: "CodeFirst.JsonAddressEditor", DbType: DataTypeDatabaseType.Ntext, ConverterType: typeof(AddressDataTypeConverter))]
          public class AddressDataType
          {
              ...
          }
        </code>
      </content>
    </section>
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
