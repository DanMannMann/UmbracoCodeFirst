<?xml version="1.0" encoding="utf-8"?>
<topic id="cb1301cc-cf88-4b2a-a662-3611bd2634e1" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
  

      <para>
        Code-First data types always use the underlying storage type (DateTime, int or string) for serialisation and deserialisation. Umbraco's default behaviour
        of returning a converted object or converting all values into strings is bypassed and the underlying data type is passed in and out of the data type converter.
        Therefore there are only 4 interfaces for implementing a data type.
      </para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="interfaces">
      <title>Data Type Interfaces</title>
      <content>
        <list class="bullet">
          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.DataTypes.IUmbracoDateDataType</codeEntityReference>
            </para>
            <para>Specifies that the data value should be stored as a DateTime2 type. Converter input &amp; output type is <codeEntityReference qualifyHint="true">T:System.DateTime</codeEntityReference>
          </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.DataTypes.IUmbracoIntegerDataType</codeEntityReference>
            </para>
            <para>
              Specifies that the data value should be stored as a 32-bit integer type.  Converter input &amp; output type is <codeEntityReference qualifyHint="true">T:System.Int32</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.DataTypes.IUmbracoNtextDataType</codeEntityReference>
            </para>
            <para>
              Specifies that the data value should be stored as an Ntext type.  Converter input &amp; output type is <codeEntityReference qualifyHint="true">T:System.String</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.DataTypes.IUmbracoNvarcharDataType</codeEntityReference>
            </para>
            <para>
              Specifies that the data value should be stored as an Nvarchar(MAX) type.  Converter input &amp; output type is <codeEntityReference qualifyHint="true">T:System.String</codeEntityReference>
            </para>
          </listItem>
        </list>
        <para>
          There are generic interfaces, inherited by the 4 above, which allow the converter input type to be specified. These may be used in the future to tighten integration 
          with Umbraco's property editor value converters. However, for now, only the constructed generic types specified by the interfaces above 
          (IUmbracoDataType&lt;DateTime&gt;, IUmbracoDataType&lt;string&gt; &amp; IUmbracoDataType&lt;int&gt;) are supported, as the code-first core only ever accesses the unconverted
          data value. 
        </para>
        <alert class="warning">
          <para> If you match up the wrong interface to a data type it is likely to cause runtime exceptions when rendering the document using strongly-typed models. </para>
          <para>
            Almost all property editors use a string, where any which store a lot of data (e.g. Grid) tend to store Ntext and those with shorter values (e.g. textstring) tend to 
            store Nvarchar. Information on the exact type for each editor is best obtained by combining a debugger with a cup of tea (or reviewing the built-in 
            data type implementations in code-first).
          </para>
        </alert>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
