<?xml version="1.0" encoding="utf-8"?>
<topic id="04441c6f-baf5-4f66-a724-d0107a13af66" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>
        Code-First for Umbraco is a framework for creating and managing Umbraco document types,
        data types, media types and other entity types using an attribute-driven, code-first approach. The
        defined content type classes can also be used as strongly-typed, compile-time-checked models in views.
      </para>
      <para>
        The demo project included in the Visual Studio solution has examples of all that stuff.
      </para>
      <autoOutline />
		</introduction>

    <section address="features">
      <title>Features</title>
      <content>
        <list class ="bullet">
          <listItem>
            <para>
              Document Type, Media Type, Member Type &amp; Data Type creation and management
            </para>
          </listItem>
          <listItem>
            <para>
              Content type tabs - including sharing tab definitions between document types &amp; inheritance in tabs
            </para>
          </listItem>
          <listItem>
            <para>
              Content type composition
            </para>
          </listItem>
          <listItem>
            <para>
              Built-in implementations of the Umbraco default data &amp; media types
            </para>
          </listItem>
          <listItem>
            <para>
              Parallel initialisation &amp; intelligent updating to minimise bootstrapping time
            </para>
          </listItem>
          <listItem>
            <para>
              Efficient lazy loading of virtual properties when constructing models for strongly-typed views
            </para>
          </listItem>
          <listItem>
            <para>
              Optional hiding of "code-first managed" types from the settings &amp; developer trees in the Umbraco back-office
            </para>
          </listItem>
          <listItem>
            <para>
              Strongly-typed content pickers
            </para>
          </listItem>
          <listItem>
            <para>
              Specialised Razor view base with a convenience property &amp; HTML helper for accessing and manipulating the strongly-typed document data
            </para>
          </listItem>
          <listItem>
            <para>
              Generate C# class files for types already in the Umbraco database - easily convert existing sites to a code-first workflow
            </para>
          </listItem>
          <listItem>
            <para>
              Linq-like extensions for navigating the content tree by CLR type - e.g. x.NearestAncestor&lt;MyType&gt;()
            </para>
          </listItem>
        </list>
      </content>
    </section>
    
    <section address="config">
      <title>Configuring your site to use Code-First</title>
      <content>
        <para>
          Code-First generally requires only a single call to one of the <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.CodeFirstManager</codeEntityReference>
          Initialise overloads to get things up and running. You'll need to pass in all of your <link xlink:href="#types">code-first entities</link> in a single call, either by passing
          in a collection of the types or by passing in all of the assemblies where your types are contained.
        </para>
        <para>
          The example below shows code which will work in the vast majority of circumstances. It assumes that the Startup event handler class is inside your main
          MVC assembly, which also contains all of your code-first entity types. Code-first initialisation will take place each time your site starts up.
        </para>
        <code>
          public class Startup : ApplicationEventHandler
          {
              protected override void ApplicationStarted(UmbracoApplicationBase umbracoApplication, ApplicationContext applicationContext)
              {
                  base.ApplicationStarted(umbracoApplication, applicationContext);

                  //Initialise code-first using the types in the current assembly
                  CodeFirstManager.Current.Initialise(this.GetType().Assembly);
              }
          }
        </code>
        <para>
          In order to enable strongly typed models &amp; views based on the code-first types initialisation needs to be run every time the site starts. The
          information gathered during initialisation is used to make the model building possible in an efficient way; without calling Initialise properly the
          strongly-typed models &amp; views won't work, even if all of the entities already exist in the database.
        </para>
      </content>
    </section>

    <section address="types">
      <title>Creating Code-First Entities</title>
      <content>
        <para>
          Code-First allows management of document, media, member &amp; data types, pre-values and templates. In the future support for all other entity types will be added
          (users, relations, etc).
        </para>
        <para>
          Documentation on creating the supported entities can be found in the topics listed below:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <link xlink:href="ec9d7ac2-6ba0-4b8c-8d1b-c591cd949e82" />
            </para>
          </listItem>
          <listItem>
            <para>
              <link xlink:href="ea9b7789-8c43-48af-9c5e-7860e55cabe1" />
            </para>
          </listItem>
          <listItem>
            <para>
              <link xlink:href="1a5b08a0-7cdf-4538-b315-9e0652e5e6e0" />
            </para>
          </listItem>
          <listItem>
            <para>
              <link xlink:href="f13fc6da-38dc-4585-b0f3-e701d17d03e1" />
            </para>
          </listItem>
          <listItem>
            <para>
              <link xlink:href="79ea8886-41e6-4691-9d55-4c3fc3be5310" />
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section address="generate">
      <title>Converting existing sites to code-first</title>
      <content>
        <para>
          There are code-generation tools which can be used to generate class files for existing data, media &amp; document types in a site. They are useful for converting an
          existing site to use code-first, and were in fact used to generate most of the classes in the
          <codeEntityReference qualifyHint="false">N:Marsman.UmbracoCodeFirst.DataTypes.BuiltIn</codeEntityReference> namespace.
        </para>
        <para>
          These tools are not yet documented or guaranteed stable, but do work fairly well.The tools are triggered by adding the following line of
          code, typically in a startup event handler, after initialising code-first.
        </para>
        <code>
          CodeFirstManager.Current.Initialise(this.GetType().Assembly);
          CodeFirstManager.Current.GenerateTypeFilesFromDatabase(@"E:\MyFolder", "My.Namespace");
        </code>
        <para>
          If you need to run the tool without initialising code-first you
          must manually populate the module resolver with the relevant modules and freeze the resolver before attempting to generate the types.
        </para>
        <code>
          //extension method AddDefaultModules in namespace Marsman.UmbracoCodeFirst.Extensions
          CodeFirstManager.Current.Modules.AddDefaultModules();
          CodeFirstManager.Current.Modules.FreezeResolver();
          CodeFirstManager.Current.GenerateTypeFilesFromDatabase(@"E:\MyFolder", "My.Namespace");
        </code>
      </content>
    </section>

    <section address="remarks">
      <title>Code-First Entity Types &amp; the Back-Office</title>
      <content>
        <para>
          Making changes to the entity types (document types, data types etc) via the usual back-office methods can be unreliable when using code-first. For entity types for
          which no code-first definition exists the default Umbraco behaviour will be honoured. Wherever a code-first definition exists any changes made
          to that entity type via the back-office developer and/or settings applications will be overwritten next time code-first is initialised. 
          It is a better approach to do all entity type definition and modification in code.
        </para>
        <para>
          You can automatically hide all "code-first managed" entity types from the trees in the developer &amp; settings back-office
          applications by adding the following line of code, usually in a startup event handler.
        </para>
        <code>
          CodeFirstManager.Current.Features.HideCodeFirstEntityTypesInTrees = true;
        </code>
      </content>
    </section>

    <!--<section address="further">
      <title>Key Attributes &amp; Classes</title>
      <content>
        <para>These classes are the main things you'll want to know about to get up and running. Their docs are worth reading.</para>
        <list class="bullet">
          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.Attributes.DocumentTypeAttribute</codeEntityReference> can be applied to a
              class to indicate that it is an Umbraco document type. Any class this attribute is applied to should inherit <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.ContentTypes.DocumentTypeBase</codeEntityReference>
            </para>
          </listItem>

          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.Attributes.ContentTabAttribute</codeEntityReference> can be applied to a property
              on a Document Type class to indicate that the property represents an Umbraco tab. The type of the property should be a class which inherits
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.ContentTypes.TabBase</codeEntityReference>. That class can
              contain properties decorated with <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.Attributes.ContentPropertyAttribute</codeEntityReference>
              which represent the properties on the tab.
            </para>
          </listItem>

          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.Attributes.ContentPropertyAttribute</codeEntityReference> can be applied to a property
              on a Document Type or Tab class to indicate that the property represents an Umbraco property.
            </para>
          </listItem>

          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.Attributes.DataTypeAttribute</codeEntityReference> can be applied to a class
              to indicate that the class represents a custom Umbraco data type. Any class this attribute is applied to should implement one of the 
              <link xlink:href="cb1301cc-cf88-4b2a-a662-3611bd2634e1" />
            </para>
          </listItem>

          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Marsman.UmbracoCodeFirst.CodeFirstManager</codeEntityReference> contains initialisation
              and registration methods for setting up and kicking off the code-first framework. For the vast majority of circumstances a simple call
              to Initialise in an ApplicationStarted event handler, passing in this.GetType().Assembly, will do everything you need.
            </para>
          </listItem>
        </list>
      </content>
    </section>-->
    <relatedTopics>
		</relatedTopics>
	</developerConceptualDocument>
</topic>
