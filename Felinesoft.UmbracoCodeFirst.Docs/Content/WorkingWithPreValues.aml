<?xml version="1.0" encoding="utf-8"?>
<topic id="f13fc6da-38dc-4585-b0f3-e701d17d03e1" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>
        Pre-values are predefined data used to configure the appearance and behaviour
        of a data type's property editor. They can provide simple key-value pairs, such
        as the options presented in a drop-down box, or more complex configuration such as
        a json settings object which can be understood by the property editor.
      </para>
      <para>
        Pre-values can be specified in a variety of ways in code-first, each of which
        is geared towards certain scenarios. The sections below detail each approach and it's uses.
      </para>
      <para>
        Each time that code-first is initialised the pre-values in the database are replaced by those found
        in the scanned type lists and/or assemblies. Pre-values which exist in the database but not in code
        will be removed, unless there are no code-first pre-values for a given data type. If no pre-values are
        specified for a data type then the default Umbraco behaviour for pre-values is honoured for that data type.
      </para>
      <autoOutline />
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="attributes">
      <title>Specifying pre-values with pre-value attributes</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          The <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.PreValueAttribute</codeEntityReference>
          is useful for specifying simple, fixed lists of configuration items. The attribute allows an alias (key), value and optionally sort
          order to be specified for each pre-value. Multiple attributes can be applied to each data type class.
        </para>
        <para>
          The example below creates a data type named "How You Heard About Us". The property is a dropdown list with 5 items.
          The items are specified using <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.PreValueAttribute</codeEntityReference>s
        </para>
        <code language="c#">
          [DataType]
          [PreValue(alias: "option1", value: "Search Engine")]
          [PreValue(alias: "option2", value: "TV Advert")]
          [PreValue(alias: "option3", value: "Radio Advert")]
          [PreValue(alias: "option4", value: "Word of Mouth")]
          [PreValue(alias: "option5", value: "Other")]
          public class HowYouHeardAboutUs : DropdownList { }
        </code>
      </content>
    </section>

    <section address="factory">
      <title>Specifying pre-values with a pre-value factory</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          The <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.DataTypes.IPreValueFactory</codeEntityReference> interface
          is useful for specifying more complex pre-values, such as json objects, or when some runtime logic is needed to create the pre-values.
        </para>
        <para>
          The interface can be implemented directly on the data type class, in which case it is found and used automatically. The interface can
          also be implemented on a separate factory class, which can then be associated with the data type using a 
          <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.PreValueFactoryAttribute</codeEntityReference>.
          Only one pre-value factory can be specified for each data type.
        </para>
        <para>
          The example below creates a data type named "How You Heard About Us". The property is a dropdown list with 5 items.
          The items are specified by a <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.DataTypes.IPreValueFactory</codeEntityReference> implemented
          on a second class.
        </para>
        <code language="c#">
          [DataType]
          [PreValueFactory(typeof(DropdownFactory))]
          public class HowYouHeardAboutUs : DropdownList { }

          public class DropdownFactory : IPreValueFactory
          {
              public IDictionary&lt;string, PreValue&gt; IPreValueFactory.GetPreValues()
              {
                  var result = new Dictionary&lt;string, PreValue&gt;();
                  
                  result.Add("option1", new PreValue("Search Engine"));
                  result.Add("option2", new PreValue("TV Advert"));
                  result.Add("option3", new PreValue("Radio Advert"));
                  result.Add("option4", new PreValue("Word of Mouth"));
                  result.Add("option5", new PreValue("Other"));
          
                  return result;
              }
          }
        </code>
      </content>
      <sections>
        <section>
          <title>Separate vs Inline Factories</title>
          <content>
            <para>
              The factory pattern with a separate class as the factory is particularly useful if you want to re-use the same pre-values for multiple data types.
            </para>
            <para>
              Allowing a data type class to be it's own pre-value factory is useful if you want the pre-values to be deduced based on knowledge of the data type
              itself. This is most useful when you want to use the generic type parameters of some instance of a generic data type to deduce the pre-values.
            </para>
            <para>
              The example below shows the <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.DataTypes.BuiltIn.TypedContentPicker`1</codeEntityReference> implementation.
              This data type uses it's generic type parameter to infer a pre-value which defines what type of content node can be picked by the content picker. This ensures that the selected node
              will always be an instance of the document type specified in the generic type parameter, or null. This can only be accomplished in a truly generic manner if the factory interface
              is implemented on the generic type itself.
            </para>
            <code language="c#">
              [DataType(propertyEditorAlias: BuiltInPropertyEditorAliases.MultiNodeTreePicker)]
              public class TypedContentPicker&lt;T&gt; : ContentPicker, IPreValueFactory where T : DocumentTypeBase
              {
                  ...
              
                  public IDictionary&lt;string, PreValue&gt; IPreValueFactory.GetPreValues()
                  {
                      Dictionary&lt;string, PreValue&gt; result = new Dictionary&lt;string, PreValue&gt;();
                      string typeAlias;
                      
                      try
                      {
                          //Find out the document type alias of the specified allowed type
                          typeAlias = this.GetType().GetGenericArguments().First().GetCodeFirstAttribute&lt;DocumentTypeAttribute&gt;().DocumentTypeAlias;
                      }
                      catch (Exception e)
                      {
                          throw new CodeFirstException("The type " + this.GetType().FullName + " does not specify a valid document type as its generic parameter", e);
                      }

                      result.Add("startNode", new PreValue(id: 0, value: "{\"type\": \"content\"}", sortOrder: 1));
                      result.Add("filter", new PreValue(id: 0, value: typeAlias, sortOrder: 2)); //Set the discovered doc type alias as the only allowed alias in the filter
                      result.Add("minNumber", new PreValue(id: 0, value: "", sortOrder: 3));
                      result.Add("maxNumber", new PreValue(id: 0, value: "1", sortOrder: 4));
                      result.Add("showEditButton", new PreValue(id: 0, value: "0", sortOrder: 5));
                      
                      return result;
                  }
              }
            </code>
            <para>
              Generic data types are added to Umbraco whenever a concrete instance is encountered on a document type. A separate data type is created
              for each different generic parameter used with a given generic data type. For instance the example below would result in 2 data types being created in Umbraco;
              one with the name "Typed Content Picker (Code First Example Document)" and another with the name "Typed Content Picker (Second Content Type)". Each data type would
              have a different document type alias specified in it's filter pre-value.
            </para>
            <code language="c#">
              [DocumentType]
              public class DocumentWithContentPicker : DocumentTypeBase
              {
                  [DataType]
                  public TypedContentPicker&lt;CodeFirstExampleDocument&gt; ExampleDocument { get; set; }

                  [DataType]
                  public TypedContentPicker&lt;SecondContentType&gt; AnotherDocument { get; set; }
              }
            </code>
          </content>
        </section>
      </sections>
    </section>

    <section address="files">
      <title>Specifying pre-values in a file</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          The <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.PreValueFileAttribute</codeEntityReference>
          allows a file path to be specified. An XML file containing the pre-value definitions can be placed at the specified path. The pre-values 
          will be loaded from the file and applied whenever Code-First is initialised.
        </para>
        <para>
          The example below creates a data type named "How You Heard About Us". The property is a dropdown list with 5 items.
          The items are specified in an XML file, shown in the second example.
        </para>
        <code language="c#">
          [DataType]
          [PreValueFile("~/App_Data/PreValues/HowYouHeardAboutUs.xml")]
          public class HowYouHeardAboutUs : DropdownList { }
        </code>
        <code language="xml" title="Pre-Values XML File">
          &lt;PreValues&gt;
              &lt;PreValue alias="option1"&gt;Search Engine&lt;/PreValue&gt;
              &lt;PreValue alias="option2"&gt;TV Advert&lt;/PreValue&gt;
              &lt;PreValue alias="option3"&gt;Radio Advert&lt;/PreValue&gt;
              &lt;PreValue alias="option4"&gt;Word of Mouth&lt;/PreValue&gt;
              &lt;PreValue alias="option5"&gt;Other&lt;/PreValue&gt;
          &lt;/PreValues&gt;
        </code>
        <para>
          The file-based approach allows pre-values to be easily modified after deployment without recompiling the code.
        </para>
      </content>
    </section>

    <section address="instance">
      <title>Instance pre-values</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
          All of the attributes described in this topic have equivalents which can be applied to document type properties to specify
          pre-values for property-specific <link xlink:href ="ea9b7789-8c43-48af-9c5e-7860e55cabe1#inline">data type instances</link>.
          The attribute usage is the same as described above. The attribute names are the same, except beginning with "Instance".
        </para>
        <list class ="bullet">
          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.InstancePreValueAttribute</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.InstancePreValueFactoryAttribute</codeEntityReference>
            </para>
          </listItem>
          <listItem>
            <para>
              <codeEntityReference qualifyHint="false">T:Felinesoft.UmbracoCodeFirst.Attributes.InstancePreValueFileAttribute</codeEntityReference>
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
