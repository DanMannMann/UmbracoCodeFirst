<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Felinesoft.UmbracoCodeFirst" #>
<#@ import namespace="Felinesoft.UmbracoCodeFirst.Core.ClassFileGeneration" #>
using Felinesoft.UmbracoCodeFirst;
using Felinesoft.UmbracoCodeFirst.ContentTypes;
using Felinesoft.UmbracoCodeFirst.DataTypes;
using Felinesoft.UmbracoCodeFirst.Attributes;
using Felinesoft.UmbracoCodeFirst.Extensions;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System;
using Felinesoft.UmbracoCodeFirst.DataTypes.BuiltIn;

namespace <#= Namespace #>
{
    [<#= Model.AttributeName #>(@"<#= Model.Name #>", @"<#= Model.Alias #>", <#= Model.AllowedChildren #>, @"<#= Model.Icon #>", <#= Model.AllowAtRoot #>, <#= Model.EnableListView #>, @"<#= Model.Description #>")]
<#foreach(TemplateDescription template in Model.Templates)
    {#>
    [Template(<#= template.IsDefault #>, "<#= template.Name #>", "<#= template.Alias #>")]
<#}#>
    public class <#= Model.ClassName #> : <#= Model.ParentClassName #>
    {
<#foreach(TabDescription tab in Model.Tabs)
        {#>
        public class <#= tab.TabClassName #> : TabBase
        {
<#foreach(PropertyDescription prop in tab.Properties)
            {
#>
            [ContentProperty(@"<#= prop.Name #>", @"<#= prop.Alias #>", <#= prop.Mandatory #>, @"<#= prop.Description #>", <#= prop.SortOrder #>, false)]
            public <#= prop.DataTypeClassName #> <#= prop.PropertyName #> { get; set; }

<#          }
    #>
        }
<#
	    }
	    foreach(TabDescription tab in Model.Tabs)
        {#>

        [ContentTab(@"<#= tab.TabName #>", <#= tab.SortOrder #>)]
        public <#= tab.TabClassName #> <#= tab.TabPropertyName #> { get; set; }
<#
        }#>
<#foreach(PropertyDescription prop in Model.Properties)
        {
        #>

        [ContentProperty(@"<#= prop.Name #>", "<#= prop.Alias #>", <#= prop.Mandatory #>, @"<#= prop.Description #>", <#= prop.SortOrder #>, false)]
        public <#= prop.DataTypeClassName #> <#= prop.PropertyName #> { get; set; }
<#      }
        #>
<#foreach(CompositionDescription comp in Model.Compositions)
        {
        #>

        [ContentComposition]
        public <#= comp.TypeName #> <#= comp.PropertyName #> { get; set; }
<#      }
        #>
    }
}